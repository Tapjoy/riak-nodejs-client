{
    "project": {
        "name": "basho-riak-client",
        "description": "Basho's officially supported NodeJS client for Riak",
        "version": "2.1.0",
        "url": "https://github.com/basho/riak-nodejs-client/wiki"
    },
    "files": {
        "lib/commands/crdt/fetchcounter.js": {
            "name": "lib/commands/crdt/fetchcounter.js",
            "modules": {},
            "classes": {
                "FetchCounter": 1,
                "FetchCounter.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/crdt/fetchmap.js": {
            "name": "lib/commands/crdt/fetchmap.js",
            "modules": {},
            "classes": {
                "FetchMap": 1,
                "FetchMap.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/crdt/fetchset.js": {
            "name": "lib/commands/crdt/fetchset.js",
            "modules": {},
            "classes": {
                "FetchSet": 1,
                "FetchSet.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/crdt/updatecounter.js": {
            "name": "lib/commands/crdt/updatecounter.js",
            "modules": {},
            "classes": {
                "UpdateCounter": 1,
                "UpdateCounter.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/crdt/updatemap.js": {
            "name": "lib/commands/crdt/updatemap.js",
            "modules": {},
            "classes": {
                "UpdateMap": 1,
                "UpdateMap.Builder": 1,
                "UpdateMap.MapOperation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/crdt/updateset.js": {
            "name": "lib/commands/crdt/updateset.js",
            "modules": {},
            "classes": {
                "UpdateSet": 1,
                "UpdateSet.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/deletevalue.js": {
            "name": "lib/commands/kv/deletevalue.js",
            "modules": {},
            "classes": {
                "DeleteValue": 1,
                "DeleteValue.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/fetchbucketprops.js": {
            "name": "lib/commands/kv/fetchbucketprops.js",
            "modules": {},
            "classes": {
                "FetchBucketProps": 1,
                "FetchBucketProps.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/fetchbuckettypeprops.js": {
            "name": "lib/commands/kv/fetchbuckettypeprops.js",
            "modules": {},
            "classes": {
                "FetchBucketTypeProps": 1,
                "FetchBucketTypeProps.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/fetchpreflist.js": {
            "name": "lib/commands/kv/fetchpreflist.js",
            "modules": {},
            "classes": {
                "FetchPreflist": 1,
                "FetchPreflist.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/fetchpropsbase.js": {
            "name": "lib/commands/kv/fetchpropsbase.js",
            "modules": {},
            "classes": {
                "FetchPropsBase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/fetchvalue.js": {
            "name": "lib/commands/kv/fetchvalue.js",
            "modules": {},
            "classes": {
                "FetchValue": 1,
                "FetchValue.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/listbuckets.js": {
            "name": "lib/commands/kv/listbuckets.js",
            "modules": {},
            "classes": {
                "ListBuckets": 1,
                "ListBuckets.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/listkeys.js": {
            "name": "lib/commands/kv/listkeys.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/riakobject.js": {
            "name": "lib/commands/kv/riakobject.js",
            "modules": {},
            "classes": {
                "RiakObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/secondaryindexquery.js": {
            "name": "lib/commands/kv/secondaryindexquery.js",
            "modules": {},
            "classes": {
                "SecondaryIndexQuery": 1,
                "SecondaryIndexQuery.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/storebucketprops.js": {
            "name": "lib/commands/kv/storebucketprops.js",
            "modules": {},
            "classes": {
                "StoreBucketProps": 1,
                "StoreBucketProps.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/storebuckettypeprops.js": {
            "name": "lib/commands/kv/storebuckettypeprops.js",
            "modules": {},
            "classes": {
                "StoreBucketTypeProps": 1,
                "StoreBucketTypeProps.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/storepropsbase.js": {
            "name": "lib/commands/kv/storepropsbase.js",
            "modules": {},
            "classes": {
                "StorePropsBase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv/storevalue.js": {
            "name": "lib/commands/kv/storevalue.js",
            "modules": {},
            "classes": {
                "StoreValue": 1,
                "StoreValue.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/mapreduce/mapreduce.js": {
            "name": "lib/commands/mapreduce/mapreduce.js",
            "modules": {},
            "classes": {
                "MapReduce": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/ts/bykeybase.js": {
            "name": "lib/commands/ts/bykeybase.js",
            "modules": {},
            "classes": {
                "ByKeyBase": 1,
                "ByKeyBase.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/ts/delete.js": {
            "name": "lib/commands/ts/delete.js",
            "modules": {},
            "classes": {
                "Delete": 1,
                "Delete.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/ts/describe.js": {
            "name": "lib/commands/ts/describe.js",
            "modules": {},
            "classes": {
                "Describe": 1,
                "Describe.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/ts/get.js": {
            "name": "lib/commands/ts/get.js",
            "modules": {},
            "classes": {
                "Get": 1,
                "Get.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/ts/listkeys.js": {
            "name": "lib/commands/ts/listkeys.js",
            "modules": {},
            "classes": {
                "ListKeys": 1,
                "ListKeys.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/ts/query.js": {
            "name": "lib/commands/ts/query.js",
            "modules": {},
            "classes": {
                "Query": 1,
                "Query.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/ts/store.js": {
            "name": "lib/commands/ts/store.js",
            "modules": {},
            "classes": {
                "Store": 1,
                "Store.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/yokozuna/deleteindex.js": {
            "name": "lib/commands/yokozuna/deleteindex.js",
            "modules": {},
            "classes": {
                "DeleteIndex": 1,
                "DeleteIndex.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/yokozuna/fetchindex.js": {
            "name": "lib/commands/yokozuna/fetchindex.js",
            "modules": {},
            "classes": {
                "FetchIndex": 1,
                "FetchIndex.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/yokozuna/fetchschema.js": {
            "name": "lib/commands/yokozuna/fetchschema.js",
            "modules": {},
            "classes": {
                "FetchSchema": 1,
                "FetchSchema.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/yokozuna/search.js": {
            "name": "lib/commands/yokozuna/search.js",
            "modules": {},
            "classes": {
                "Search": 1,
                "Search.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/yokozuna/storeindex.js": {
            "name": "lib/commands/yokozuna/storeindex.js",
            "modules": {},
            "classes": {
                "StoreIndex": 1,
                "StoreIndex.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/yokozuna/storeschema.js": {
            "name": "lib/commands/yokozuna/storeschema.js",
            "modules": {},
            "classes": {
                "StoreSchema": 1,
                "StoreSchema.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/commandbase.js": {
            "name": "lib/commands/commandbase.js",
            "modules": {},
            "classes": {
                "CommandBase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/crdt.js": {
            "name": "lib/commands/crdt.js",
            "modules": {
                "CRDT": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/kv.js": {
            "name": "lib/commands/kv.js",
            "modules": {
                "KV": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/mr.js": {
            "name": "lib/commands/mr.js",
            "modules": {
                "MR": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/ping.js": {
            "name": "lib/commands/ping.js",
            "modules": {},
            "classes": {
                "Ping": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/ts.js": {
            "name": "lib/commands/ts.js",
            "modules": {
                "TS": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/commands/yz.js": {
            "name": "lib/commands/yz.js",
            "modules": {
                "YZ": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/core/authreq.js": {
            "name": "lib/core/authreq.js",
            "modules": {},
            "classes": {
                "AuthReq": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/core/core.js": {
            "name": "lib/core/core.js",
            "modules": {
                "Core": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/core/leastexecutingnodemanager.js": {
            "name": "lib/core/leastexecutingnodemanager.js",
            "modules": {},
            "classes": {
                "LeastExecutingNodeManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/core/nodemanager.js": {
            "name": "lib/core/nodemanager.js",
            "modules": {},
            "classes": {
                "NodeManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/core/riakcluster.js": {
            "name": "lib/core/riakcluster.js",
            "modules": {},
            "classes": {
                "RiakCluster": 1,
                "RiakCluster.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/core/riakconnection.js": {
            "name": "lib/core/riakconnection.js",
            "modules": {},
            "classes": {
                "RiakConnection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/core/riaknode.js": {
            "name": "lib/core/riaknode.js",
            "modules": {},
            "classes": {
                "RiakNode": 1,
                "RiakNode.Builder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/core/roundrobinnodemanager.js": {
            "name": "lib/core/roundrobinnodemanager.js",
            "modules": {},
            "classes": {
                "RoundRobinNodeManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/core/starttls.js": {
            "name": "lib/core/starttls.js",
            "modules": {},
            "classes": {
                "StartTls": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/client.js": {
            "name": "lib/client.js",
            "modules": {
                "Client": 1
            },
            "classes": {
                "Client": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "CRDT": {
            "name": "CRDT",
            "submodules": {},
            "elements": {},
            "classes": {
                "FetchCounter": 1,
                "FetchCounter.Builder": 1,
                "FetchMap": 1,
                "FetchMap.Builder": 1,
                "FetchSet": 1,
                "FetchSet.Builder": 1,
                "UpdateCounter": 1,
                "UpdateCounter.Builder": 1,
                "UpdateMap": 1,
                "UpdateMap.Builder": 1,
                "UpdateMap.MapOperation": 1,
                "UpdateSet": 1,
                "UpdateSet.Builder": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib/commands/crdt/updateset.js",
            "line": 175,
            "description": "Provides all the commands for Riak CRDTs (Conflict-Free Replicated Data Type)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options to use for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak.",
                            "type": "String"
                        },
                        {
                            "name": "bucket",
                            "description": "The bucket in riak.",
                            "type": "String"
                        },
                        {
                            "name": "key",
                            "description": "The key for the counter you want to store. If not provided Riak will generate and return one.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "w",
                            "description": "The W value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dw",
                            "description": "The DW value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pw",
                            "description": "The PW value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "returnBody",
                            "description": "Return the counter.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "timeout",
                            "description": "Set a timeout for this command.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak. Will ne null if returnBody not set.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "generatedKey",
                                    "description": "If no key was supplied, Riak will generate and return one here.",
                                    "type": "String"
                                },
                                {
                                    "name": "counterValue",
                                    "description": "The value of the counter in Riak.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase",
            "itemtype": "main"
        },
        "KV": {
            "name": "KV",
            "submodules": {},
            "elements": {},
            "classes": {
                "DeleteValue": 1,
                "DeleteValue.Builder": 1,
                "FetchBucketProps": 1,
                "FetchBucketProps.Builder": 1,
                "FetchBucketTypeProps": 1,
                "FetchBucketTypeProps.Builder": 1,
                "FetchPreflist": 1,
                "FetchPreflist.Builder": 1,
                "FetchPropsBase": 1,
                "FetchValue": 1,
                "FetchValue.Builder": 1,
                "ListBuckets": 1,
                "ListBuckets.Builder": 1,
                "RiakObject": 1,
                "SecondaryIndexQuery": 1,
                "SecondaryIndexQuery.Builder": 1,
                "StoreBucketProps": 1,
                "StoreBucketProps.Builder": 1,
                "StoreBucketTypeProps": 1,
                "StoreBucketTypeProps.Builder": 1,
                "StorePropsBase": 1,
                "StoreValue": 1,
                "StoreValue.Builder": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib/commands/kv/storevalue.js",
            "line": 181,
            "description": "Provides all the commands for Riak Key-Value operations.",
            "itemtype": "main"
        },
        "MR": {
            "name": "MR",
            "submodules": {},
            "elements": {},
            "classes": {
                "MapReduce": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib/commands/mapreduce/mapreduce.js",
            "line": 12,
            "description": "Provides the commands for Riak Map-Reduce",
            "itemtype": "main"
        },
        "TS": {
            "name": "TS",
            "submodules": {},
            "elements": {},
            "classes": {
                "ListKeys": 1,
                "ListKeys.Builder": 1,
                "ByKeyBase": 1,
                "ByKeyBase.Builder": 1,
                "Delete": 1,
                "Delete.Builder": 1,
                "Describe": 1,
                "Describe.Builder": 1,
                "Get": 1,
                "Get.Builder": 1,
                "Query": 1,
                "Query.Builder": 1,
                "Store": 1,
                "Store.Builder": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib/commands/ts/store.js",
            "line": 152,
            "description": "Provides all the commands for Riak Timeseries operations.",
            "itemtype": "main"
        },
        "YZ": {
            "name": "YZ",
            "submodules": {},
            "elements": {},
            "classes": {
                "DeleteIndex": 1,
                "DeleteIndex.Builder": 1,
                "FetchIndex": 1,
                "FetchIndex.Builder": 1,
                "FetchSchema": 1,
                "FetchSchema.Builder": 1,
                "Search": 1,
                "Search.Builder": 1,
                "StoreIndex": 1,
                "StoreIndex.Builder": 1,
                "StoreSchema": 1,
                "StoreSchema.Builder": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib/commands/yokozuna/storeschema.js",
            "line": 68,
            "description": "Provides all the commands for Riak Search 2.0 (Yokozuna/Solr)",
            "itemtype": "main"
        },
        "Core": {
            "name": "Core",
            "submodules": {},
            "elements": {},
            "classes": {
                "CommandBase": 1,
                "Ping": 1,
                "AuthReq": 1,
                "LeastExecutingNodeManager": 1,
                "NodeManager": 1,
                "RiakCluster": 1,
                "RiakCluster.Builder": 1,
                "RiakConnection": 1,
                "RiakNode": 1,
                "RiakNode.Builder": 1,
                "RoundRobinNodeManager": 1,
                "StartTls": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib/core/starttls.js",
            "line": 11,
            "description": "Provides the classes that make up the core of the client.",
            "itemtype": "main"
        },
        "Client": {
            "name": "Client",
            "submodules": {},
            "elements": {},
            "classes": {
                "Client": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/client.js",
            "line": 31,
            "description": "Provides the Client class"
        }
    },
    "classes": {
        "FetchCounter": {
            "name": "FetchCounter",
            "shortname": "FetchCounter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CRDT",
            "namespace": "",
            "file": "lib/commands/crdt/fetchcounter.js",
            "line": 12,
            "description": "Command used to fetch a counter value from Riak.\n\nAs a convenience, a builder class is provided:\n\n    var fetch = new FetchCounter.Builder()\n                    .withBucketType('myBucketType')\n                    .withBucket('myBucket')\n                    .withKey('myKey')\n                    .withCallback(myCallback)\n                    .build();\n\n See {{#crossLink \"FetchCounter.Builder\"}}FetchCounter.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options to use for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in Riak.",
                            "type": "String"
                        },
                        {
                            "name": "bucket",
                            "description": "The bucket in Riak.",
                            "type": "String"
                        },
                        {
                            "name": "key",
                            "description": "The key for the counter you want to fetch.",
                            "type": "String"
                        },
                        {
                            "name": "timeout",
                            "description": "Set a timeout in Riak for this operation.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "r",
                            "description": "The R value to use for this fetch.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pr",
                            "description": "The PR value to use for this fetch.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "notFoundOk",
                            "description": "If true a vnode returning notfound for a key increments the R tally.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "useBasicQuorum",
                            "description": "Controls whether a read request should return early in some fail cases.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "counterValue",
                                    "description": "The counter value in Riak.",
                                    "type": "Number"
                                },
                                {
                                    "name": "isNotFound",
                                    "description": "True if there was no counter in Riak.",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "FetchCounter.Builder": {
            "name": "FetchCounter.Builder",
            "shortname": "FetchCounter.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CRDT",
            "namespace": "",
            "file": "lib/commands/crdt/fetchcounter.js",
            "line": 98,
            "description": "A builder for constructing FetchCounter instances.\n\nRather than having to manually construct the __options__ and instantiating\na FetchCounter directly, this builder may be used.\n\n    var fetch = new FetchCounter.Builder()\n                     .withBucketType('myBucketType')\n                     .withBucket('myBucket')\n                     .withKey('myKey')\n                     .withCallback(myCallback)\n                     .build();",
            "is_constructor": 1
        },
        "FetchMap": {
            "name": "FetchMap",
            "shortname": "FetchMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CRDT",
            "namespace": "",
            "file": "lib/commands/crdt/fetchmap.js",
            "line": 14,
            "description": "Command for fetching a map from Riak.\n\nAs a convenience, a builder class is provided:\n\n    var fetch = new FetchMap.Builder()\n                     .withBucketType('myBucketType')\n                     .withBucket('myBucket')\n                     .withKey('myKey')\n                     .withCallback(myCallback)\n                     .build();\n\nSee {{#crossLink \"FetchMap.Builder\"}}FetchMap.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options to use for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak.",
                            "type": "String"
                        },
                        {
                            "name": "bucket",
                            "description": "The bucket in riak.",
                            "type": "String"
                        },
                        {
                            "name": "key",
                            "description": "The key for the map you want to fetch.",
                            "type": "String"
                        },
                        {
                            "name": "setsAsBuffers",
                            "description": "Return sets in the map as arrays of Buffers rather than strings.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "timeout",
                            "description": "Set a timeout for this operation.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "r",
                            "description": "The R value to use for this operation.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pr",
                            "description": "The PR value to use for this operation.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "notFoundOk",
                            "description": "If true a vnode returning notfound for a key increments the r tally.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "useBasicQuorum",
                            "description": "Controls whether a read request should return early in some fail cases.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "context",
                                    "description": "An opaque context to be used in any subsequent modification of the map.",
                                    "type": "Buffer"
                                },
                                {
                                    "name": "map",
                                    "description": "The map in Riak, converted to a JS object.",
                                    "type": "Object"
                                },
                                {
                                    "name": "isNotFound",
                                    "description": "True if there was no map in Riak.",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "FetchMap.Builder": {
            "name": "FetchMap.Builder",
            "shortname": "FetchMap.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CRDT",
            "namespace": "",
            "file": "lib/commands/crdt/fetchmap.js",
            "line": 112,
            "description": "A builder for constructing FetchMap instances.\n\nRather than having to manually construct the __options__ and instantiating\na FetchMap directly, this builder may be used.\n\n    var fetch = new FetchMap.Builder()\n                    .withBucketType('myBucketType')\n                    .withBucket('myBucket')\n                    .withKey('myKey')\n                    .withCallback(myCallback)\n                    .build();",
            "is_constructor": 1
        },
        "FetchSet": {
            "name": "FetchSet",
            "shortname": "FetchSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CRDT",
            "namespace": "",
            "file": "lib/commands/crdt/fetchset.js",
            "line": 12,
            "description": "Command used to fetch a set from Riak.\n\nAs a convenience, a builder class is provided:\n\n    var fetch = new FetchSet.Builder()\n                    .withBucketType('myBucketType')\n                    .withBucket('myBucket')\n                    .withKey('myKey')\n                    .withCallback(myCallback)\n                    .build();\n\n See {{#crossLink \"FetchSet.Builder\"}}FetchSet.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options to use for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak.",
                            "type": "String"
                        },
                        {
                            "name": "bucket",
                            "description": "The bucket in riak.",
                            "type": "String"
                        },
                        {
                            "name": "key",
                            "description": "The key for the counter you want to fetch.",
                            "type": "String"
                        },
                        {
                            "name": "setsAsBuffers",
                            "description": "Return values as Buffers rather than strings.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "timeout",
                            "description": "Tet a timeout for this operation.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "r",
                            "description": "The R value to use for this fetch.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pr",
                            "description": "The PR value to use for this fetch.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "notFoundOk",
                            "description": "If true a vnode returning notfound for a key increments the r tally.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "useBasicQuorum",
                            "description": "Controls whether a read request should return early in some fail cases.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "context",
                                    "description": "An opaque context to be used in any subsequent modification of the set.",
                                    "type": "Buffer"
                                },
                                {
                                    "name": "values",
                                    "description": "An array holding the values in the set. String by default, Buffers if setsAsBuffers was used.",
                                    "type": "String[]|Buffer[]"
                                },
                                {
                                    "name": "isNotFound",
                                    "description": "True if there was no set in Riak.",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "FetchSet.Builder": {
            "name": "FetchSet.Builder",
            "shortname": "FetchSet.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CRDT",
            "namespace": "",
            "file": "lib/commands/crdt/fetchset.js",
            "line": 131,
            "description": "A builder for constructing FetchSet instances.\n\nRather than having to manually construct the __options__ and instantiating\na FetchSet directly, this builder may be used.\n\n    var fetch = new FetchSet.Builder()\n                     .withBucketType('myBucketType')\n                     .withBucket('myBucket')\n                     .withKey('myKey')\n                     .withCallback(myCallback)\n                     .build();",
            "is_constructor": 1
        },
        "UpdateCounter": {
            "name": "UpdateCounter",
            "shortname": "UpdateCounter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CRDT",
            "namespace": "",
            "file": "lib/commands/crdt/updatecounter.js",
            "line": 14,
            "description": "Command used to update a Counter in Riak\n\nAs a convenience, a builder class is provided:\n\n    var update = new UpdateCounter.Builder()\n              .withBucketType('counters')\n              .withBucket('myBucket')\n              .withKey('counter_1')\n              .withIncrement(100)\n              .withCallback(callback)\n              .build();\n\nSee {{#crossLink \"UpdateCounter.Builder\"}}UpdateCounter.Builder{{/crossLink}}"
        },
        "UpdateCounter.Builder": {
            "name": "UpdateCounter.Builder",
            "shortname": "UpdateCounter.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CRDT",
            "namespace": "",
            "file": "lib/commands/crdt/updatecounter.js",
            "line": 117,
            "description": "A builder for constructing UpdateCounter instances.\n\nRather than having to manually construct the __options__ and instantiating\na UpdateCounter directly, this builder may be used.\n\n    var update = new UpdateCounter.Builder()\n              .withBucketType('counters')\n              .withBucket('myBucket')\n              .withKey('counter_1')\n              .withIncrement(100)\n              .withCallback(callback)\n              .build();",
            "is_constructor": 1
        },
        "UpdateMap": {
            "name": "UpdateMap",
            "shortname": "UpdateMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CRDT",
            "namespace": "",
            "file": "lib/commands/crdt/updatemap.js",
            "line": 23,
            "description": "Command used to update a Map in Riak.\n\nAs a convenience, a builder method is provided as well as an object with\na fluent API for constructing the update.\n\n    var mapOp = new UpdateMap.MapOperation();\n    mapOp.incrementCounter('counter_1', 50)\n        .addToSet('set_1', 'set_value_1')\n        .setRegister('register_1', new Buffer('register_value_1'))\n        .setFlag('flag_1', true)\n        .map('inner_map')\n            .incrementCounter('counter_1', 50)\n            .addToSet('set_2', 'set_value_2');\n\nSee {{#crossLink \"UpdateMap.MapOperation\"}}UpdateMap.MapOperation{{/crossLink}}\n\n    var update = new UpdateMap.Builder()\n              .withBucketType('maps')\n              .withBucket('myBucket')\n              .withKey('map_1')\n              .withMapOperation(mapOp)\n              .withCallback(myCallback)\n              .withReturnBody(true)\n              .build();\n\nSee {{#crossLink \"UpdateMap.Builder\"}}UpdateMap.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options to use for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak.",
                            "type": "String"
                        },
                        {
                            "name": "bucket",
                            "description": "The bucket in riak.",
                            "type": "String"
                        },
                        {
                            "name": "op",
                            "description": "The set of modifications to make to this map.",
                            "type": "MapOperation"
                        },
                        {
                            "name": "key",
                            "description": "The key for the counter you want to store. If not supplied Riak will gererate one.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "description": "The context from a previous fetch. Required for remove operations.",
                            "type": "Buffer",
                            "optional": true
                        },
                        {
                            "name": "w",
                            "description": "The W value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dw",
                            "description": "The DW value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pw",
                            "description": "The PW value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "returnBody",
                            "description": "Return the map.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "setsAsBuffers",
                            "description": "Return sets as arrays of Buffers rather than strings.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "timeout",
                            "description": "Set a timeout for this command.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak. Will be null if returnBody is not set.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "generatedKey",
                                    "description": "If no key was supplied, Riak will generate and return one here.",
                                    "type": "String"
                                },
                                {
                                    "name": "context",
                                    "description": "An opaque context to be used in any subsequent modification of the map.",
                                    "type": "Buffer"
                                },
                                {
                                    "name": "map",
                                    "description": "The map in Riak, converted to a JS object.",
                                    "type": "Object"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "UpdateMap.Builder": {
            "name": "UpdateMap.Builder",
            "shortname": "UpdateMap.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CRDT",
            "namespace": "",
            "file": "lib/commands/crdt/updatemap.js",
            "line": 270,
            "description": "A builder for constructing UpdateMap instances.\n\nRather than having to manually construct the __options__ and instantiating\na UpdateMap directly, this builder may be used.\n\n    var update = new UpdateMap.Builder()\n              .withBucketType('counters')\n              .withBucket('myBucket')\n              .withKey('counter_1')\n              .withMapOperation(mapOp)\n              .withCallback(callback)\n              .build();\n\nSee {{#crossLink \"UpdateMap.MapOperation\"}}UpdateMap.MapOperation{{/crossLink}}",
            "is_constructor": 1
        },
        "UpdateMap.MapOperation": {
            "name": "UpdateMap.MapOperation",
            "shortname": "UpdateMap.MapOperation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CRDT",
            "namespace": "",
            "file": "lib/commands/crdt/updatemap.js",
            "line": 442,
            "description": "Class that encapsulates modifications to a Map in Riak.\n\nRather than manually constructing this yourself, a fluent API is provided.\n\n    var mapOp = new UpdateMap.MapOperation();\n    mapOp.incrementCounter('counter_1', 50)\n        .addToSet('set_1', 'set_value_1')\n        .setRegister('register_1', new Buffer('register_value_1'))\n        .setFlag('flag_1', true)\n        .map('inner_map')\n            .incrementCounter('counter_1', 50)\n            .addToSet('set_2', 'set_value_2');",
            "is_constructor": 1
        },
        "UpdateSet": {
            "name": "UpdateSet",
            "shortname": "UpdateSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CRDT",
            "namespace": "",
            "file": "lib/commands/crdt/updateset.js",
            "line": 18,
            "description": "Command used tp update a set in Riak\n\nAs a convenience, a builder class is provided:\n\n       var update = new UpdateSet.Builder()\n              .withBucketType('sets')\n              .withBucket('myBucket')\n              .withKey('set_1')\n              .withAdditions(['this', 'that', 'other'])\n              .withCallback(callback)\n              .build();\n\nSee {{#crossLink \"UpdateSet.Builder\"}}UpdateSet.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options to use for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak.",
                            "type": "String"
                        },
                        {
                            "name": "bucket",
                            "description": "The bucket in riak.",
                            "type": "String"
                        },
                        {
                            "name": "key",
                            "description": "The key for the set you want to store. Riak will generate one if not set.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "additions",
                            "description": "The values to be added to the set.",
                            "type": "String[]|Buffer[]",
                            "optional": true
                        },
                        {
                            "name": "removals",
                            "description": "The values to remove from the set. Note that a context is required.",
                            "type": "String[]|Buffer[]",
                            "optional": true
                        },
                        {
                            "name": "context",
                            "description": "The context from a previous fetch. Required for remove operations.",
                            "type": "Buffer",
                            "optional": true
                        },
                        {
                            "name": "returnBody",
                            "description": "Return the set.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "setsAsBuffers",
                            "description": "Return the set as an array of Buffers rather than strings.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "w",
                            "description": "The W value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dw",
                            "description": "The DW value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pw",
                            "description": "The PW value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "Set a timeout for this command.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Rhe callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak. will be null if returnBody is not set.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "generatedKey",
                                    "description": "If no key was supplied, Riak will generate and return one here.",
                                    "type": "String"
                                },
                                {
                                    "name": "context",
                                    "description": "An opaque context to be used in any subsequent modification of the set.",
                                    "type": "Buffer"
                                },
                                {
                                    "name": "values",
                                    "description": "An array holding the values in the set. String by default, Buffers if setsAsBuffers was used.",
                                    "type": "String[]|Buffer[]"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "UpdateSet.Builder": {
            "name": "UpdateSet.Builder",
            "shortname": "UpdateSet.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CRDT",
            "namespace": "",
            "file": "lib/commands/crdt/updateset.js",
            "line": 175,
            "description": "A builder for constructing UpdateSet instances.\n\nRather than having to manually construct the __options__ and instantiating\na UpdateSet directly, this builder may be used.\n\n    var update = new UpdateSet.Builder()\n                      .withBucketType('myBucketType')\n                      .withBucket('myBucket')\n                      .withKey('myKey')\n                      .withAdditions(['this', 'that', 'other'])\n                      .withCallback(myCallback)\n                      .build();",
            "is_constructor": 1
        },
        "DeleteValue": {
            "name": "DeleteValue",
            "shortname": "DeleteValue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/deletevalue.js",
            "line": 12,
            "description": "Command used to delete a value from Riak.\n\nAs a convenience, a builder class is provided:\n\n     var deleteValue = new DeleteValue.Builder()\n         .withBucket('myBucket')\n         .withKey('myKey')\n         .withVClock(vclock)\n         .withCallback(callback)\n         .build();\n\nSee {{#crossLink \"DeleteValue.Builder\"}}DeleteValue.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in Riak. If not suppled 'default' is used.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "default"
                        },
                        {
                            "name": "bucket",
                            "description": "The bucket in Riak.",
                            "type": "String"
                        },
                        {
                            "name": "key",
                            "description": "The key for the object you want to delete.",
                            "type": "String"
                        },
                        {
                            "name": "vclock",
                            "description": "The vector clock to use.",
                            "type": "Buffer",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "Set a timeout for this operation.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "r",
                            "description": "The R value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pr",
                            "description": "The PR value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "w",
                            "description": "The W value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dw",
                            "description": "The DW value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pw",
                            "description": "The PW value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "rw",
                            "description": "The RW value to use.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak. Will be true unless there was an error.",
                            "type": "Boolean"
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "DeleteValue.Builder": {
            "name": "DeleteValue.Builder",
            "shortname": "DeleteValue.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/deletevalue.js",
            "line": 118,
            "description": "A builder for constructing DeleteValue instances.\n\nRather than having to manually construct the __options__ and instantiating\na DeleteValue directly, this builder may be used.\n\n    var deleteValue = new DeleteValue.Builder()\n         .withBucket('myBucket')\n         .withKey('myKey')\n         .withVClock(vclock)\n         .withCallback(callback)\n         .build();",
            "is_constructor": 1
        },
        "FetchBucketProps": {
            "name": "FetchBucketProps",
            "shortname": "FetchBucketProps",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/fetchbucketprops.js",
            "line": 12,
            "description": "Command used to fetch a bucket's properties from Riak.\n\nAs a convenience, a builder class is provided:\n\n    var fetch = new FetchBucketProps.Builder()\n        .withBucketType('my_type')\n        .withBucket('myBucket')\n        .withCallback(myCallback)\n        .build();\n\nSee {{#crossLink \"FetchBucketProps.Builder\"}}FetchBucketProps.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "default"
                        },
                        {
                            "name": "bucket",
                            "description": "The bucket in riak.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak. This is an oject with all the bucket properties.",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "FetchPropsBase"
        },
        "FetchBucketProps.Builder": {
            "name": "FetchBucketProps.Builder",
            "shortname": "FetchBucketProps.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/fetchbucketprops.js",
            "line": 54,
            "description": "A builder for constructing FetchBucketProps instances\n\nRather than having to manually construct the __options__ and instantiating\na FetchBucketProps directly, this builder may be used.\n\n    var fetch = new FetchBucketProps.Builder()\n        .withBucketType('my_type')\n        .withBucket('myBucket')\n        .withCallback(myCallback)\n        .build();",
            "is_constructor": 1
        },
        "FetchBucketTypeProps": {
            "name": "FetchBucketTypeProps",
            "shortname": "FetchBucketTypeProps",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/fetchbuckettypeprops.js",
            "line": 12,
            "description": "Command used to fetch a bucket's properties from Riak.\n\nAs a convenience, a builder class is provided:\n\n    var fetch = new FetchBucketTypeProps.Builder()\n        .withBucketType('my_type')\n        .withCallback(myCallback)\n        .build();\n\nSee {{#crossLink \"FetchBucketTypeProps.Builder\"}}FetchBucketTypeProps.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "default"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak. This is an oject with all the bucket type properties.",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "FetchPropsBase"
        },
        "FetchBucketTypeProps.Builder": {
            "name": "FetchBucketTypeProps.Builder",
            "shortname": "FetchBucketTypeProps.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/fetchbuckettypeprops.js",
            "line": 50,
            "description": "A builder for constructing FetchBucketTypeProps instances\n\nRather than having to manually construct the __options__ and instantiating\na FetchBucketTypeProps directly, this builder may be used.\n\n    var fetch = new FetchBucketTypeProps.Builder()\n        .withBucketType('my_type')\n        .withCallback(myCallback)\n        .build();",
            "is_constructor": 1
        },
        "FetchPreflist": {
            "name": "FetchPreflist",
            "shortname": "FetchPreflist",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/fetchpreflist.js",
            "line": 13,
            "description": "Command used to fetch an object's preflist from Riak.\n\nAs a convenience, a builder class is provided:\n\n    var fetch = new FetchPreflist.Builder()\n        .withBucketType('myBucketType')\n        .withBucket('myBucket')\n        .withKey('myKey')\n        .withCallback(myCallback)\n        .build();\n\nSee {{#crossLink \"FetchPreflist.Builder\"}}FetchPreflist.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak. If not supplied 'default' is used.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "default"
                        },
                        {
                            "name": "bucket",
                            "description": "The bucket in riak.",
                            "type": "String"
                        },
                        {
                            "name": "key",
                            "description": "The key for the object you want to fetch.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "preflist",
                                    "description": "An array of one or more preflist entries.",
                                    "type": "Object[]"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "FetchPreflist.Builder": {
            "name": "FetchPreflist.Builder",
            "shortname": "FetchPreflist.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/fetchpreflist.js",
            "line": 91,
            "description": "A builder for constructing FetchPreflist instances.\n\nRather than having to manually construct the __options__ and instantiating\na FetchPreflist directly, this builder may be used.\n\n    var fetchValue = new FetchPreflist.Builder()\n         .withBucketType('myBucketType')\n         .withBucket('myBucket')\n         .withKey('myKey')\n         .build();",
            "is_constructor": 1
        },
        "FetchPropsBase": {
            "name": "FetchPropsBase",
            "shortname": "FetchPropsBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/fetchpropsbase.js",
            "line": 11,
            "is_constructor": 1,
            "params": [
                {
                    "name": "pbRequestName",
                    "description": "name of the Riak protocol buffer this command will send",
                    "type": "String"
                },
                {
                    "name": "pbResponseName",
                    "description": "name of the Riak protocol buffer this command will receive",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak. This is an oject with all the bucket properties.",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "FetchValue": {
            "name": "FetchValue",
            "shortname": "FetchValue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 13,
            "description": "Command used to fetch an object from Riak.\n\nAs a convenience, a builder class is provided:\n\n    var fetch = new FetchValue.Builder()\n        .withBucket('myBucket')\n        .withKey('myKey')\n        .withCallback(myCallback)\n        .build();\n\nSee {{#crossLink \"FetchValue.Builder\"}}FetchValue.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak. If not supplied 'default' is used.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "default"
                        },
                        {
                            "name": "bucket",
                            "description": "The bucket in riak.",
                            "type": "String"
                        },
                        {
                            "name": "key",
                            "description": "The key for the object you want to fetch.",
                            "type": "String"
                        },
                        {
                            "name": "convertToJs",
                            "description": "Convert the values stored in riak to a JS object using JSON.parse()",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "conflictResolver",
                            "description": "A function used to resolve siblings to a single object.",
                            "type": "Function",
                            "optional": true,
                            "props": [
                                {
                                    "name": "objects",
                                    "description": "The array of objects returned from Riak.",
                                    "type": "RiakObject[]|Object[]"
                                }
                            ]
                        },
                        {
                            "name": "timeout",
                            "description": "Set a timeout for this operation.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "r",
                            "description": "The R value to use for this fetch.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pr",
                            "description": "The PR value to use for this fetch.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "notFoundOk",
                            "description": "If true a vnode returning notfound for a key increments the r tally.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "useBasicQuorum",
                            "description": "Controls whether a read request should return early in some fail cases.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "returnDeletedVClock",
                            "description": "True to return tombstones.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "headOnly",
                            "description": "Return only the metadata.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "ifModified",
                            "description": "Return the object if the supplied vclock does not match (the object is modified).",
                            "type": "Buffer",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "isNotFound",
                                    "description": "True if there was no value in Riak.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "isUnchanged",
                                    "description": "True if the object has not changed (based on a vclock provided via ifModified)",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "vclock",
                                    "description": "The vector clock for this object (and its siblings)",
                                    "type": "Buffer"
                                },
                                {
                                    "name": "values",
                                    "description": "An array of one or more values. Either RiakObjects or JS objects if convertToJs was used.",
                                    "type": "Object[]|RiakObject[]"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "FetchValue.Builder": {
            "name": "FetchValue.Builder",
            "shortname": "FetchValue.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 161,
            "description": "A builder for constructing FetchValue instances.\n\nRather than having to manually construct the __options__ and instantiating\na FetchValue directly, this builder may be used.\n\n    var fetchValue = new FetchValue.Builder()\n         .withBucket('myBucket')\n         .withKey('myKey')\n         .build();",
            "is_constructor": 1
        },
        "ListBuckets": {
            "name": "ListBuckets",
            "shortname": "ListBuckets",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/listbuckets.js",
            "line": 12,
            "description": "Command used to list buckets in a bucket type.\n\nAs a convenience, a builder class is provided;\n\n    var listBuckets = new ListBuckets.Builder()\n                 .withBucketType('myBucketType')\n                 .withCallback(myCallback)\n                 .build();\n\nSee {{#crossLink \"ListBuckets.Builder\"}}ListBuckets.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "default"
                        },
                        {
                            "name": "stream",
                            "description": "Whether to stream or accumulate the result before calling callback",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "timeout",
                            "description": "Set a timeout for this operation.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "buckets",
                                    "description": "The buckets returned from Riak.",
                                    "type": "String[]"
                                },
                                {
                                    "name": "done",
                                    "description": "True if you have received all the buckets.",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "ListBuckets.Builder": {
            "name": "ListBuckets.Builder",
            "shortname": "ListBuckets.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/listbuckets.js",
            "line": 89,
            "description": "A builder for constructing ListBuckets instances.\n\nRather than having to manually construct the __options__ and instantiating\na ListBuckets directly, this builder may be used.\n\n    var listBuckets = new ListBuckets.Builder()\n                       .withBucketType('myBucketType')\n                       .withCallback(myCallback)\n                       .build();",
            "is_constructor": 1
        },
        "ListKeys": {
            "name": "ListKeys",
            "shortname": "ListKeys",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/listkeys.js",
            "line": 14,
            "description": "Command used to list keys in a table.\n\nAs a convenience, a builder class is provided;\n\n    var listKeys = new ListKeys.Builder()\n                 .withTable('myTable')\n                 .withCallback(myCallback)\n                 .build();\n\nSee {{#crossLink \"ListKeys.Builder\"}}ListKeys.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak. If not supplied 'default' is used.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "default"
                        },
                        {
                            "name": "bucket",
                            "description": "The bucket in riak.",
                            "type": "String"
                        },
                        {
                            "name": "stream",
                            "description": "Whether to stream or accumulate the result before calling callback.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "timeout",
                            "description": "Set a timeout for this operation.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the keys returned from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "done",
                                    "description": "True if you have received all the keys.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "bucketType",
                                    "description": "The bucketType the keys are from.",
                                    "type": "String"
                                },
                                {
                                    "name": "bucket",
                                    "description": "The bucket the keys are from.",
                                    "type": "String"
                                },
                                {
                                    "name": "keys",
                                    "description": "The array of keys.",
                                    "type": "String[]"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "ListKeys.Builder": {
            "name": "ListKeys.Builder",
            "shortname": "ListKeys.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/listkeys.js",
            "line": 88,
            "description": "A builder for constructing ListKeys instances.\n\nRather than having to manually construct the __options__ and instantiating\na ListKeys directly, this builder may be used.\n\n    var listKeys = new ListKeys.Builder()\n                 .withTable('table')\n                 .withCallback(myCallback)\n                 .build();",
            "is_constructor": 1
        },
        "RiakObject": {
            "name": "RiakObject",
            "shortname": "RiakObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/riakobject.js",
            "line": 14,
            "description": "A class that encapsulates the metadata and value stored in Riak.\n\nWhile you can fetch and store regular JS objects with {{#crossLink \"FetchValue\"}}{{/crossLink}}\nand {{#crossLink \"StoreValue\"}}{{/crossLink}}, if you want access to the associated \nmetadata stored in Riak with the value you'll want to use a RiakObject instead.",
            "is_constructor": 1
        },
        "SecondaryIndexQuery": {
            "name": "SecondaryIndexQuery",
            "shortname": "SecondaryIndexQuery",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 15,
            "description": "Command used to perform a secondary index query.\n\nAs a convenience, a builder class is provided:\n\n    var query = new SecondaryIndexQuery.Builder()\n                 .withBucket('myBucket')\n                 .withIndexName('email_bin')\n                 .withIndexKey('roach@basho.com')\n                 .withCallback(myCallback)\n                 .build();\n\nSee {{#crossLink \"SecondaryIndexQuery.Builder\"}}SecondaryIndexQuery.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak. If not supplied 'default' is used.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "default"
                        },
                        {
                            "name": "bucket",
                            "description": "The bucket in riak.",
                            "type": "String"
                        },
                        {
                            "name": "indexName",
                            "description": "The secondary index name to query",
                            "type": "String"
                        },
                        {
                            "name": "indexKey",
                            "description": "A single index key to query",
                            "type": "String|Number",
                            "optional": true
                        },
                        {
                            "name": "rangeStart",
                            "description": "Starting key for a range query",
                            "type": "String|Number",
                            "optional": true
                        },
                        {
                            "name": "rangeEnd",
                            "description": "Ending key for a range query",
                            "type": "String|Number",
                            "optional": true
                        },
                        {
                            "name": "returnKeyAndIndex",
                            "description": "Return the index keys along with the object keys",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "maxResults",
                            "description": "Limit the results returned and paginate if necessary",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "continuation",
                            "description": "A continuation returned from a previous query that set maxResults. Used for pagination.",
                            "type": "Buffer",
                            "optional": true
                        },
                        {
                            "name": "stream",
                            "description": "Whether to stream or accumulate the result before calling callback.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "timeout",
                            "description": "Set a timeout for this operation.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "paginationSort",
                            "description": "True to sort a non-paginated query.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "the callback to be executed by the command.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "values",
                                    "description": "Object keys returned by the query, and optionally the index keys.",
                                    "type": "Object[]"
                                },
                                {
                                    "name": "done",
                                    "description": "True if you have received all the results.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "continuation",
                                    "description": "The continuation if a continuation was returned.",
                                    "type": "Buffer"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "SecondaryIndexQuery.Builder": {
            "name": "SecondaryIndexQuery.Builder",
            "shortname": "SecondaryIndexQuery.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 174,
            "description": "A builder for constructing SecondaryIndexquery instances.\n\nRather than having to manually construct the __options__ and instantiating\na SecondaryIndexQuery directly, this builder may be used.\n\n    var query = new SecondaryIndexQuery.Builder()\n                 .withBucket('myBucket')\n                 .withIndexName('email_bin')\n                 .withIndexKey('roach@basho.com')\n                 .withCallback(myCallback)\n                 .build();",
            "is_constructor": 1
        },
        "StoreBucketProps": {
            "name": "StoreBucketProps",
            "shortname": "StoreBucketProps",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/storebucketprops.js",
            "line": 13,
            "description": "Command used to set the properties on a bucket in Riak.\n\nAs a convenience, a builder class is provided:\n\n    var storeProps = new StoreBucketProps.Builder()\n                 .withBucket('my-bucket')\n                 .withAllowMult(true)\n                 .build();\n\nSee {{#crossLink \"StoreBucketProps.Builder\"}}StoreBucketProps.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The properties to store",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucket",
                            "description": "The bucket in riak.",
                            "type": "String"
                        },
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak. If not supplied 'default is used'",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak. This will be true.",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "The response from Riak. This is an oject with all the bucket properties.",
                            "type": "Object"
                        },
                        {
                            "name": "",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "StorePropsBase"
        },
        "StoreBucketProps.Builder": {
            "name": "StoreBucketProps.Builder",
            "shortname": "StoreBucketProps.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/storebucketprops.js",
            "line": 58,
            "description": "A builder for constructing StoreBucketProps instances\n\nRather than having to manually construct the __options__ and instantiating\na StoreBucketProps directly, this builder may be used.\n\n    var storeProps = new StoreBucketProps.Builder()\n                 .withAllowMult(true)\n                 .build();",
            "is_constructor": 1,
            "extends": "StorePropsBase.Builder"
        },
        "StoreBucketTypeProps": {
            "name": "StoreBucketTypeProps",
            "shortname": "StoreBucketTypeProps",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/storebuckettypeprops.js",
            "line": 13,
            "description": "Command used to set the properties on a bucket type in Riak.\n\nAs a convenience, a builder class is provided:\n\n    var storeProps = new StoreBucketTypeProps.Builder()\n                 .withBucketType('my-type')\n                 .withAllowMult(true)\n                 .build();\n\nSee {{#crossLink \"StoreBucketTypeProps.Builder\"}}StoreBucketTypeProps.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The properties to store",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak. If not supplied 'default is used'",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak. This will be true.",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "The response from Riak. This is an oject with all the bucket properties.",
                            "type": "Object"
                        },
                        {
                            "name": "",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "StorePropsBase"
        },
        "StoreBucketTypeProps.Builder": {
            "name": "StoreBucketTypeProps.Builder",
            "shortname": "StoreBucketTypeProps.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/storebuckettypeprops.js",
            "line": 51,
            "description": "A builder for constructing StoreBucketTypeProps instances\n\nRather than having to manually construct the __options__ and instantiating\na StoreBucketTypeProps directly, this builder may be used.\n\n    var storeProps = new StoreBucketTypeProps.Builder()\n                 .withAllowMult(true)\n                 .build();",
            "is_constructor": 1,
            "extends": "StorePropsBase.Builder"
        },
        "StorePropsBase": {
            "name": "StorePropsBase",
            "shortname": "StorePropsBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 18,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The properties to store",
                    "type": "Object",
                    "props": [
                        {
                            "name": "r",
                            "description": "The R value.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pr",
                            "description": "The PR value.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "w",
                            "description": "The W value.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dw",
                            "description": "The DW value.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pw",
                            "description": "The PW value.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "rw",
                            "description": "The RW value.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "notFoundOk",
                            "description": "If true a vnode returning notfound for a key increments the r tally.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "basicQuorum",
                            "description": "Controls whether a read request should return early in some fail cases.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "nVal",
                            "description": "The number of replicas.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "allowMult",
                            "description": "Whether to allow sibling objects to be created.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "lastWriteWins",
                            "description": "Whether to ignore vector clocks when writing.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "oldVClock",
                            "description": "An epoch time value.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "youngVClock",
                            "description": "An epoch time value.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "bigVClock",
                            "description": "An epoch time value.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "smallVClock",
                            "description": "An epoch time value.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "backend",
                            "description": "The name of the backend to use.",
                            "type": "Sring",
                            "optional": true
                        },
                        {
                            "name": "search",
                            "description": "Enable the pre-commit hook for Legacy Riak search.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "searchIndex",
                            "description": "The name of the search index to use.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "chashKeyfun",
                            "description": "An object representing the Erlang func to use.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "precommit",
                            "description": "Array of precommit hooks",
                            "type": "Object[]",
                            "optional": true
                        },
                        {
                            "name": "postcommit",
                            "description": "Array of postcommit hooks",
                            "type": "Object[]",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "pbRequestName",
                    "description": "name of the Riak protocol buffer this command will send",
                    "type": "String"
                },
                {
                    "name": "pbResponseName",
                    "description": "name of the Riak protocol buffer this command will receive",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak. This will be true.",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "The response from Riak. This is an oject with all the bucket properties.",
                            "type": "Object"
                        },
                        {
                            "name": "",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "StoreValue": {
            "name": "StoreValue",
            "shortname": "StoreValue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/storevalue.js",
            "line": 13,
            "description": "Command used to store data in Riak.\n\nAs a convenience, a builder class is provided:\n\n     var storeValue = new StoreValue.Builder()\n         .withBucket('myBucket')\n         .withKey('myKey')\n         .withContent(myObj)\n         .build();\n\nSee {{#crossLink \"StoreValue.Builder\"}}StoreValue.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bucketType",
                            "description": "The bucket type in riak. If not supplied 'default' is used.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "default"
                        },
                        {
                            "name": "bucket",
                            "description": "The bucket in riak.",
                            "type": "String"
                        },
                        {
                            "name": "key",
                            "description": "The key for the object you want to store.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "vclock",
                            "description": "The vector clock to use.",
                            "type": "Buffer",
                            "optional": true
                        },
                        {
                            "name": "value",
                            "description": "The value to store in Riak. JS Objects will be passed to JSON.stringify().",
                            "type": "RiakObject|String|Buffer|Object"
                        },
                        {
                            "name": "w",
                            "description": "The W value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "dw",
                            "description": "The DW value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "pw",
                            "description": "The PW value to use.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "returnBody",
                            "description": "Return the stored object and meta (incl. siblings)",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "returnHead",
                            "description": "Return the metatdata only for the stored object.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "convertToJs",
                            "description": "Convert the returned value(s) to JS objects using JSON.parse()",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "conflictResolver",
                            "description": "A function used to resolve siblings to a single object.",
                            "type": "Function",
                            "optional": true,
                            "props": [
                                {
                                    "name": "objects",
                                    "description": "The array of objects returned from Riak.",
                                    "type": "RiakObject[]|Object[]"
                                }
                            ]
                        },
                        {
                            "name": "timeout",
                            "description": "Set a timeout for this command.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "ifNotModified",
                            "description": "The if_not_modified flag.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "ifNoneMatch",
                            "description": "The if_none_match flag.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The allback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "vclock",
                                    "description": "The vector clock for this object (and its siblings)",
                                    "type": "Buffer"
                                },
                                {
                                    "name": "values",
                                    "description": "An array of one or more values. Either RiakObjects or JS objects if convertToJs was used.",
                                    "type": "Object[]|RiakObject[]"
                                },
                                {
                                    "name": "generatedKey",
                                    "description": "The key generated by Riak if one was not supplied.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "StoreValue.Builder": {
            "name": "StoreValue.Builder",
            "shortname": "StoreValue.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "KV",
            "namespace": "",
            "file": "lib/commands/kv/storevalue.js",
            "line": 181,
            "description": "A builder for constructing StoreValue instances.\n\nRather than having to manually construct the __options__ and instantiating\na StoreValue directly, this builder may be used.\n\n    var storeValue = new StoreValue.Builder()\n         .withBucket('myBucket')\n         .withKey('myKey')\n         .withContent(myObj);\n         .build();",
            "is_constructor": 1
        },
        "MapReduce": {
            "name": "MapReduce",
            "shortname": "MapReduce",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "MR",
            "namespace": "",
            "file": "lib/commands/mapreduce/mapreduce.js",
            "line": 12,
            "description": "Command used to perform a Map-Reduce query in Riak.\n\nThe Riak Map-Reduce API uses JSON for its query.\n\nA typical map-reduce query (JSON) will look like:\n\n    {\n      \"inputs\": \"goog\",\n      \"query\": [\n        {\n           \"map\": {\n             \"language\": \"javascript\",\n             \"source\": \"function(value, keyData, arg){ var data = Riak.mapValuesJson(value)[0]; var month = value.key.split('-').slice(0,2).join('-'); var obj = {}; obj[month] = data.High - data.Low; return [ obj ];}\"\n           }\n        },\n        {\n           \"reduce\": {\n             \"language\": \"javascript\",\n             \"source\": \"function(values, arg){ return [ values.reduce(function(acc, item){ for(var month in item){ if(acc[month]) { acc[month] = (acc[month] < item[month]) ? item[month] : acc[month]; } else { acc[month] = item[month]; } } return acc;  }) ];}\",\n             \"keep\": true\n           }\n        }\n      ]\n    }\n\nFor more info see:\n[Loading Data and Running MapReduce](http://docs.basho.com/riak/latest/tutorials/fast-track/Loading-Data-and-Running-MapReduce-Queries/)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "query",
                    "description": "The Map-Reduce query. This is a string containing JSON.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed by this command.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "done",
                                    "description": "True if the entire response has been received.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "phase",
                                    "description": "The phase the response is from.",
                                    "type": "Number"
                                },
                                {
                                    "name": "response",
                                    "description": "The results.",
                                    "type": "Object[]"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "stream",
                    "description": "stream the results or accumulate before calling callback.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "CommandBase"
        },
        "ByKeyBase": {
            "name": "ByKeyBase",
            "shortname": "ByKeyBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/bykeybase.js",
            "line": 16,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "table",
                            "description": "The timeseries table from which retrieve a key from Riak.",
                            "type": "String"
                        },
                        {
                            "name": "key",
                            "description": "The timeseries composite key to retrieve from Riak.",
                            "type": "Object[]"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The allback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "Object containing timeseries data.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "columns",
                                    "description": "Timeseries column data",
                                    "type": "Object"
                                },
                                {
                                    "name": "rows",
                                    "description": "Timeseries row data",
                                    "type": "Object"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "ByKeyBase.Builder": {
            "name": "ByKeyBase.Builder",
            "shortname": "ByKeyBase.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/bykeybase.js",
            "line": 50,
            "description": "A builder for constructing Get / Delete command instances.\n\nRather than having to manually construct the __options__ and instantiating\na ByKeyBase directly, this builder may be used.\n\n    var get = new Get.Builder()\n         .withKey(key)\n         .build();",
            "is_constructor": 1
        },
        "Delete": {
            "name": "Delete",
            "shortname": "Delete",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/delete.js",
            "line": 14,
            "description": "Command used to delete timeseries data from Riak.\n\nAs a convenience, a builder class is provided:\n\n     var get = new Delete.Builder()\n         .withKey(key)\n         .withCallback(callback)\n         .build();\n\nSee {{#crossLink \"Delete.Builder\"}}Delete.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The allback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "true or false to indicate success / failure.",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "ByKeyBase"
        },
        "Delete.Builder": {
            "name": "Delete.Builder",
            "shortname": "Delete.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/delete.js",
            "line": 45,
            "description": "A builder for constructing Delete instances.\n\nRather than having to manually construct the __options__ and instantiating\na Delete directly, this builder may be used.\n\n    var get = new Delete.Builder()\n         .withKey(key)\n         .build();",
            "is_constructor": 1,
            "extends": "ByKeyBase.Builder"
        },
        "Describe": {
            "name": "Describe",
            "shortname": "Describe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/describe.js",
            "line": 14,
            "description": "Command used to get a timeseries table's description.\n\nAs a convenience, a builder class is provided:\n\n     var storeValue = new Describe.Builder()\n         .withTable('GeoCheckin')\n         .withCallback(callback)\n         .build();\n\nSee {{#crossLink \"Describe.Builder\"}}Describe.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "table",
                            "description": "The timeseries table in Riak.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The allback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "Object containing timeseries table metadata.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "columns",
                                    "description": "Timeseries table metadata columns.",
                                    "type": "Object"
                                },
                                {
                                    "name": "rows",
                                    "description": "Timeseries table metadata rows.",
                                    "type": "Object"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "Query"
        },
        "Describe.Builder": {
            "name": "Describe.Builder",
            "shortname": "Describe.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/describe.js",
            "line": 60,
            "description": "A builder for constructing Describe instances.\n\nRather than having to manually construct the __options__ and instantiating\na Describe directly, this builder may be used.\n\n    var storeValue = new Describe.Builder()\n         .withTable('table')\n         .build();",
            "is_constructor": 1
        },
        "Get": {
            "name": "Get",
            "shortname": "Get",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/get.js",
            "line": 15,
            "description": "Command used to get timeseries data in Riak.\n\nAs a convenience, a builder class is provided:\n\n     var get = new Get.Builder()\n         .withKey(key)\n         .withCallback(callback)\n         .build();\n\nSee {{#crossLink \"Get.Builder\"}}Get.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The allback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response.columns",
                            "description": "Timeseries column data",
                            "type": "Object"
                        },
                        {
                            "name": "response.rows",
                            "description": "Timeseries row data",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "ByKeyBase"
        },
        "Get.Builder": {
            "name": "Get.Builder",
            "shortname": "Get.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/get.js",
            "line": 50,
            "description": "A builder for constructing Get instances.\n\nRather than having to manually construct the __options__ and instantiating\na Get directly, this builder may be used.\n\n    var get = new Get.Builder()\n         .withKey(key)\n         .build();",
            "is_constructor": 1,
            "extends": "ByKeyBase.Builder"
        },
        "Query": {
            "name": "Query",
            "shortname": "Query",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/query.js",
            "line": 19,
            "description": "Command used to query timeseries data in Riak.\n\nAs a convenience, a builder class is provided:\n\n     var storeValue = new Query.Builder()\n         .withQuery('select * from timeseries')\n         .withCallback(callback)\n         .build();\n\nSee {{#crossLink \"Query.Builder\"}}Query.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "query",
                            "description": "The timeseries query for Riak.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The allback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "Object containing timeseries data.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "columns",
                                    "description": "Timeseries column data",
                                    "type": "Object"
                                },
                                {
                                    "name": "rows",
                                    "description": "Timeseries row data",
                                    "type": "Object"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "Query.Builder": {
            "name": "Query.Builder",
            "shortname": "Query.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/query.js",
            "line": 72,
            "description": "A builder for constructing Query instances.\n\nRather than having to manually construct the __options__ and instantiating\na Query directly, this builder may be used.\n\n    var storeValue = new Query.Builder()\n         .withTable('table')\n         .withColumns(columns)\n         .withRows(rows)\n         .build();",
            "is_constructor": 1
        },
        "Store": {
            "name": "Store",
            "shortname": "Store",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/store.js",
            "line": 25,
            "description": "Command used to store timeseries data in Riak.\n\nAs a convenience, a builder class is provided:\n\n     var storeValue = new Store.Builder()\n         .withTable('table')\n         .withColumns(cols)\n         .withRows(rows)\n         .build();\n\nSee {{#crossLink \"Store.Builder\"}}Store.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "table",
                            "description": "The timeseries table in Riak.",
                            "type": "String"
                        },
                        {
                            "name": "columns",
                            "description": "The timeseries columns in Riak.",
                            "type": "Object[]"
                        },
                        {
                            "name": "rows",
                            "description": "The timeseries rows in Riak.",
                            "type": "Object[]"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The allback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "Will be either true or false.",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "Store.Builder": {
            "name": "Store.Builder",
            "shortname": "Store.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "TS",
            "namespace": "",
            "file": "lib/commands/ts/store.js",
            "line": 152,
            "description": "A builder for constructing Store instances.\n\nRather than having to manually construct the __options__ and instantiating\na Store directly, this builder may be used.\n\n    var storeValue = new Store.Builder()\n         .withTable('table')\n         .withColumns(columns)\n         .withRows(rows)\n         .build();",
            "is_constructor": 1
        },
        "DeleteIndex": {
            "name": "DeleteIndex",
            "shortname": "DeleteIndex",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "YZ",
            "namespace": "",
            "file": "lib/commands/yokozuna/deleteindex.js",
            "line": 12,
            "description": "Command used to Delete a Yokozuna index.\n\nAs a convenience, a builder class is provided:\n\n    var del = DeleteIndex.Builder()\n                 .withIndexName('index_name')\n                 .withCallback(callback)\n                 .build();\n\nSee {{#crossLink \"DeleteIndex.Builder\"}}DeleteIndex.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command",
                    "type": "Object",
                    "props": [
                        {
                            "name": "indexName",
                            "description": "The name of the index to delete.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "operation either succeeds or returns error. This will be true.",
                            "type": "Boolean"
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "DeleteIndex.Builder": {
            "name": "DeleteIndex.Builder",
            "shortname": "DeleteIndex.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "YZ",
            "namespace": "",
            "file": "lib/commands/yokozuna/deleteindex.js",
            "line": 63,
            "description": "A builder for constructing DeleteIndex instances.\n\nRather than having to manually construct the __options__ and instantiating\na DeleteIndex directly, this builder may be used.\n\n    var del = DeleteIndex.Builder()\n                 .withIndexName('index_name')\n                 .withCallback(callback)\n                 .build();",
            "is_constructor": 1
        },
        "FetchIndex": {
            "name": "FetchIndex",
            "shortname": "FetchIndex",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "YZ",
            "namespace": "",
            "file": "lib/commands/yokozuna/fetchindex.js",
            "line": 12,
            "description": "Command used to fetch a (Yokozuna) index or all indexes.\n\nAs a convenience, a builder class is provided:\n\n    var fetch = FetchIndex.Builder()\n                 .withIndexName('index_name')\n                 .withCallback(callback)\n                 .build();\n\nSee {{#crossLink \"FetchIndex.Builder\"}}FetchIndex.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "the options for this command",
                    "type": "Object",
                    "props": [
                        {
                            "name": "indexName",
                            "description": "the name of a specific index to fetch. If not supplied, all are returned.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "the callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "error message",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "array of indexes.",
                            "type": "Object[]",
                            "props": [
                                {
                                    "name": "indexName",
                                    "description": "The name of the index.",
                                    "type": "String"
                                },
                                {
                                    "name": "schemaName",
                                    "description": "The schema for the index.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "FetchIndex.Builder": {
            "name": "FetchIndex.Builder",
            "shortname": "FetchIndex.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "YZ",
            "namespace": "",
            "file": "lib/commands/yokozuna/fetchindex.js",
            "line": 79,
            "description": "A builder for constructing FetchIndex instances.\n\nRather than having to manually construct the __options__ and instantiating\na FetchIndex directly, this builder may be used.\n\n    var fetch = FetchIndex.Builder()\n                 .withIndexName('index_name')\n                 .withCallback(callback)\n                 .build();",
            "is_constructor": 1
        },
        "FetchSchema": {
            "name": "FetchSchema",
            "shortname": "FetchSchema",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "YZ",
            "namespace": "",
            "file": "lib/commands/yokozuna/fetchschema.js",
            "line": 12,
            "description": "Command used to fetch a Yokozuna schema.\n\nAs a convenience, a builder class is provided:\n\n    var fetch = FetchSchema.Builder()\n                 .withSchemaName('schema_name')\n                 .withCallback(callback)\n                 .build();\n\nSee {{#crossLink \"FetchSchema.Builder\"}}FetchSchema.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command",
                    "type": "Object",
                    "props": [
                        {
                            "name": "schemaName",
                            "description": "The name of the schema to fetch.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "The schema name.",
                                    "type": "String"
                                },
                                {
                                    "name": "content",
                                    "description": "The schema XML.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "FetchSchema.Builder": {
            "name": "FetchSchema.Builder",
            "shortname": "FetchSchema.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "YZ",
            "namespace": "",
            "file": "lib/commands/yokozuna/fetchschema.js",
            "line": 69,
            "description": "A builder for constructing FetchSchema instances.\n\nRather than having to manually construct the __options__ and instantiating\na FetchSchema directly, this builder may be used.\n\n    var fetch = FetchSchema.Builder()\n                 .withSchemaName('schema_name')\n                 .withCallback(callback)\n                 .build();",
            "is_constructor": 1
        },
        "Search": {
            "name": "Search",
            "shortname": "Search",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "YZ",
            "namespace": "",
            "file": "lib/commands/yokozuna/search.js",
            "line": 12,
            "description": "Command used to perform a (Yokozuna) search.\n\nAs a convenience, a builder class is provided:\n\n     var search = new Search.Builder()\n                     .withIndexName(myIndex)\n                     .withQuery(myQuery)\n                     .withNumRows(10)\n                     .withCallback(myCallback)\n                     .build();\n\nSee {{#crossLink \"Search.Builder\"}}Search.Builder{{/crossLink}}\n\nFor more information on Riak Search (Yokozuna/Solr) see:\n[Using Search](http://docs.basho.com/riak/latest/dev/using/search/)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "indexName",
                            "description": "Set the index name used for this search.",
                            "type": "String"
                        },
                        {
                            "name": "q",
                            "description": "Set the Solr query string.",
                            "type": "String"
                        },
                        {
                            "name": "maxRows",
                            "description": "Specify the maximum number of results to return.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "10"
                        },
                        {
                            "name": "start",
                            "description": "Specify the starting result of the query.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "sortField",
                            "description": "Sort the results on the specified field name.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "filterQuery",
                            "description": "Filters the search by an additional query scoped to inline fields.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "defaultField",
                            "description": "Use the provided field as the default. Overrides the “default_field” setting in the schema file.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "defaultOperation",
                            "description": "Set the default operation. Allowed settings are either “and” or “or”.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "returnFields",
                            "description": "Only return the provided fields.",
                            "type": "String[]",
                            "optional": true
                        },
                        {
                            "name": "presort",
                            "description": "Sorts all of the results. Either \"key\" or \"score\".",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to execute when the comman completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "an error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak (Solr)",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "numFound",
                                    "description": "The number of documents found.",
                                    "type": "Number"
                                },
                                {
                                    "name": "maxScore",
                                    "description": "The max score value.",
                                    "type": "Number"
                                },
                                {
                                    "name": "docs",
                                    "description": "Array of documents returned from Solr.",
                                    "type": "Object[]"
                                }
                            ]
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "Search.Builder": {
            "name": "Search.Builder",
            "shortname": "Search.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "YZ",
            "namespace": "",
            "file": "lib/commands/yokozuna/search.js",
            "line": 143,
            "description": "A builder for constructing Search instances.\n\nRather than having to manually construct the __options__ and instantiating\na Search directly, this builder may be used.\n\n    var search = new Search.Builder()\n                   .withIndexName(myIndex)\n                   .withQuery(myQuery)\n                   .withNumRows(10)\n                   .withCallback(myCallback)\n                   .build();",
            "is_constructor": 1
        },
        "StoreIndex": {
            "name": "StoreIndex",
            "shortname": "StoreIndex",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "YZ",
            "namespace": "",
            "file": "lib/commands/yokozuna/storeindex.js",
            "line": 13,
            "description": "Command used to store a Yokozuna index.\n\nAs a convenience, a builder class is provided:\n\n    var store = StoreIndex.Builder()\n                 .withIndexName('index_name')\n                 .withSchemaName('my_schema')\n                 .withCallback(callback)\n                 .build();\n\nSee {{#crossLink \"StoreIndex.Builder\"}}StoreIndex.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command",
                    "type": "Object",
                    "props": [
                        {
                            "name": "indexName",
                            "description": "The name of the index.",
                            "type": "String"
                        },
                        {
                            "name": "schemaName",
                            "description": "The name of the schema for this index.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "_yz_default"
                        },
                        {
                            "name": "timeout",
                            "description": "Set a timeout for this operation.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "nVal",
                            "description": "The number of replicas.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The operation either succeeds or errors. This will be true.",
                            "type": "Boolean"
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "StoreIndex.Builder": {
            "name": "StoreIndex.Builder",
            "shortname": "StoreIndex.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "YZ",
            "namespace": "",
            "file": "lib/commands/yokozuna/storeindex.js",
            "line": 82,
            "description": "A builder for constructing StoreIndex instances.\n\nRather than having to manually construct the __options__ and instantiating\na StoreIndex directly, this builder may be used.\n\n    var store = StoreIndex.Builder()\n                 .withIndexName('index_name')\n                 .withSchemaName('my_schema')\n                 .withCallback(callback)\n                 .build();",
            "is_constructor": 1
        },
        "StoreSchema": {
            "name": "StoreSchema",
            "shortname": "StoreSchema",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "YZ",
            "namespace": "",
            "file": "lib/commands/yokozuna/storeschema.js",
            "line": 13,
            "description": "Command used to store a Yokozuna schema.\n\nAs a convenience, a builder class is provided:\n\n    var store = StoreSchema.Builder()\n                 .withSchemaName('schema_name')\n                 .withSchema(mySchemaXML)\n                 .withCallback(callback)\n                 .build();\n\nSee {{#crossLink \"StoreSchema.Builder\"}}StoreSchema.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this command",
                    "type": "Object",
                    "props": [
                        {
                            "name": "schemaName",
                            "description": "The name of the schema to store.",
                            "type": "String"
                        },
                        {
                            "name": "schema",
                            "description": "The XML that defines this schema",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "This operation either succeeds or errors. This will be true.",
                            "type": "Boolean"
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "StoreSchema.Builder": {
            "name": "StoreSchema.Builder",
            "shortname": "StoreSchema.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "YZ",
            "namespace": "",
            "file": "lib/commands/yokozuna/storeschema.js",
            "line": 68,
            "description": "A builder for constructing StoreSchema instances.\n\nRather than having to manually construct the __options__ and instantiating\na StoreSchema directly, this builder may be used.\n\n    var store = StoreSchema.Builder()\n                 .withSchemaName('schema_name')\n                 .withSchema(mySchemaXML)\n                 .withCallback(callback)\n                 .build();",
            "is_constructor": 1
        },
        "CommandBase": {
            "name": "CommandBase",
            "shortname": "CommandBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "lib/commands/commandbase.js",
            "line": 12,
            "description": "Base class for all commands. \n\nClasses extending this need to override:\n\nconstructPbRequest\nonSuccess\nonRiakError\nonError",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pbRequestName",
                    "description": "name of the Riak protocol buffer this command will send",
                    "type": "String"
                },
                {
                    "name": "pbResponseName",
                    "description": "name of the Riak protocol buffer this command will receive",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak.",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ]
        },
        "Ping": {
            "name": "Ping",
            "shortname": "Ping",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "lib/commands/ping.js",
            "line": 12,
            "description": "Command used to ping Riak.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak. Will be true unless there was an error.",
                            "type": "Boolean"
                        },
                        {
                            "name": "data",
                            "description": "additional error data. Will be null if no error.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "extends": "CommandBase"
        },
        "AuthReq": {
            "name": "AuthReq",
            "shortname": "AuthReq",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "lib/core/authreq.js",
            "line": 13,
            "description": "Provides the AuthReq class\nCommand used to authenticate with Riak.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "user",
                            "description": "the user with which to authenticate (required)",
                            "type": "String"
                        },
                        {
                            "name": "password",
                            "description": "the password with which to authenticate (optional)",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "the function to call when the command completes or errors",
                    "type": "Function"
                }
            ],
            "extends": "CommandBase"
        },
        "LeastExecutingNodeManager": {
            "name": "LeastExecutingNodeManager",
            "shortname": "LeastExecutingNodeManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "lib/core/leastexecutingnodemanager.js",
            "line": 10,
            "description": "A NodeManager that can be used by RiakCluster.\n\nThis NodeManager does a least-commands-executing selection of RiakNodes.",
            "params": [
                {
                    "name": "shuffle",
                    "description": "Shuffle nodes that have same execution count.",
                    "type": "Boolean"
                }
            ],
            "is_constructor": 1,
            "extends": "NodeManager"
        },
        "NodeManager": {
            "name": "NodeManager",
            "shortname": "NodeManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "lib/core/nodemanager.js",
            "line": 11,
            "description": "Abstract class that defines a NodeManager\n\nEvery time a command is executed on the {{#crossLink \"RiakCluster\"}}{{/crossLink}} \na {{#crossLink \"RiakNode\"}}{{/crossLink}} is selected. The default procedure for \ndoing so is a simple round-robin provided via {{#crossLink \"DefaultNodeManager\"}}{{/crossLink}}.\n\nIf you wish to alter this behavior you should extend this class and implement \nyour own executeOnNode(). This function should pick a node from the list and \nexecute the command via {{#crossLink \"RiakNode/execute:method\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the node manager",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "RiakCluster": {
            "name": "RiakCluster",
            "shortname": "RiakCluster",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "lib/core/riakcluster.js",
            "line": 17,
            "description": "Provides the RiakCluster class and its Builder.\n\nInstances of this class maintain a set of {{#crossLink \"RiakNode\"}}{{/crossLink}} objects and \nexecutes commands on them.\n\n__options__ is an object with the following defaults:\n\n    {\n      nodes: [defaultRiakNode],\n      executionAttempts: 3,\n      nodeManager: RoundRobinNodeManager,\n      queueCommands: false,\n      queueMaxDepth: unlimited\n    }\n    \nThe __defaultRiakNode__ is a RiakNode connected to 127.0.0.1:8087 \n\nAs a convenience a builder class is provided. \n\n    var nodeTemplate = new RiakNode.Builder().withMinConnections(10);\n    var nodeAddys = ['192.168.1.1', '192.168.1.2'];\n    var arrayOfNodes = RiakNode.buildNodes(nodeAddys, nodeTemplate);\n    var myCluster = new RiakCluster.Builder().withRiakNodes(arrayOfNodes).build();\n    \nSee {{#crossLink \"RiakCluster.Builder\"}}RiakCluster.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "- the options to use.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "nodes",
                            "description": "An array of (unstarted) {{#crossLink \"RiakNode\"}}{{/crossLink}} objects.",
                            "type": "RiakNode[]"
                        },
                        {
                            "name": "executionAttempts",
                            "description": "Number of times to retry commands on failure.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "3"
                        },
                        {
                            "name": "nodeManager",
                            "description": "Set the NodeManager for this cluster.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "RoundRobinNodeManager"
                        },
                        {
                            "name": "queueCommands",
                            "description": "Set whether to queue commands or not if no RiakNodes are available.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "queueMaxDepth",
                            "description": "The maximum number of commands to queue if queueCommands is set. Default is unlimited.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "unlimited"
                        },
                        {
                            "name": "queueSubmitInterval",
                            "description": "The duration in milliseconds between queue submission attempts. Default is 500.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "500"
                        }
                    ]
                }
            ]
        },
        "RiakCluster.Builder": {
            "name": "RiakCluster.Builder",
            "shortname": "RiakCluster.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "lib/core/riakcluster.js",
            "line": 406,
            "description": "A Builder for constructing RiakCluster instances.\n\nRather than having to manually construct the __options__ and instantiating\na RiakCluster directly, this builder may be used.\n\nvar newCluster = new RiakCluster.Builder().withRiakNodes([node1, node2]).build();",
            "is_constructor": 1
        },
        "RiakConnection": {
            "name": "RiakConnection",
            "shortname": "RiakConnection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "lib/core/riakconnection.js",
            "line": 23,
            "description": "Provides the RiakConnection class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "- the options to use.",
                    "type": "Object"
                }
            ]
        },
        "RiakNode": {
            "name": "RiakNode",
            "shortname": "RiakNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "lib/core/riaknode.js",
            "line": 18,
            "description": "Provides the RiakNode class and its Builder.\n\nInstances of this class maintain connections to and execute commands on\na Riak node in a Riak cluster.\n\n__options__ is an object with the following defaults:\n\n    {\n      remoteAdddress: '127.0.0.1',\n      remotePort: 8087,\n      maxConnections: 10000,\n      minConnections: 1,\n      idleTimeout: 3000,\n      connectionTimeout: 0,\n      cork: true\n    }\n\nAs a convenience a builder class is provided;\n\n    var newNode = new RiakNode.Builder().withMinConnections(10).build();\n\nSee {{#crossLink \"RiakNode.Builder\"}}RiakNode.Builder{{/crossLink}}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "The options for this RiakNode.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "remoteAddress",
                            "description": "The address for this node. Can also be a FQDN.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "127.0.0.1"
                        },
                        {
                            "name": "remotePort",
                            "description": "The port to connect to.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "8087"
                        },
                        {
                            "name": "minConnections",
                            "description": "Set the minimum number of active connections to maintain.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "maxConnections",
                            "description": "Set the maximum number of connections allowed.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "10000"
                        },
                        {
                            "name": "idleTimeout",
                            "description": "Set the idle timeout used to reap inactive connections.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1000"
                        },
                        {
                            "name": "connectionTimeout",
                            "description": "Set the connection timeout used when making new connections.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "auth",
                            "description": "Set the authentication information for connections made by this node.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "user",
                                    "description": "Riak username.",
                                    "type": "String"
                                },
                                {
                                    "name": "password",
                                    "description": "Riak password. Not required if using user cert.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "pfx",
                                    "description": "A string or buffer holding the PFX or PKCS12 encoded private key, certificate and CA certificates.",
                                    "type": "String|Buffer",
                                    "optional": true
                                },
                                {
                                    "name": "key",
                                    "description": "A string holding the PEM encoded private key.",
                                    "type": "String|Buffer",
                                    "optional": true
                                },
                                {
                                    "name": "passphrase",
                                    "description": "A string of passphrase for the private key or pfx.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "cert",
                                    "description": "A string holding the PEM encoded certificate.",
                                    "type": "String|Buffer",
                                    "optional": true
                                },
                                {
                                    "name": "ca",
                                    "description": "Either a string or list of strings of PEM encoded CA certificates to trust.",
                                    "type": "String|String[]|Buffer[]",
                                    "optional": true
                                },
                                {
                                    "name": "crl",
                                    "description": "Either a string or list of strings of PEM encoded CRLs (Certificate Revocation List).",
                                    "type": "String|String[]|Buffer[]",
                                    "optional": true
                                },
                                {
                                    "name": "rejectUnauthorized",
                                    "description": "A boolean indicating whether a server should automatically reject clients with invalid certificates. Only applies to servers with requestCert enabled.",
                                    "type": "Boolean",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "cork",
                            "description": "Use 'cork' on all sockets. Default is true.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "RiakNode.Builder": {
            "name": "RiakNode.Builder",
            "shortname": "RiakNode.Builder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "lib/core/riaknode.js",
            "line": 495,
            "description": "A Builder for constructing RiakNode instances.\n\nRather than having to manually construct the __options__ and instantiating\na RiakNode directly, this builder may be used.\n\n     var riakNode = new RiakNode.Builder().withRemotePort(9999).build();",
            "is_constructor": 1
        },
        "RoundRobinNodeManager": {
            "name": "RoundRobinNodeManager",
            "shortname": "RoundRobinNodeManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "lib/core/roundrobinnodemanager.js",
            "line": 10,
            "description": "A NodeManager that can be used by RiakCluster.\n\nThis NodeManager does a round-robin selection of RiakNodes.",
            "is_constructor": 1,
            "extends": "NodeManager"
        },
        "StartTls": {
            "name": "StartTls",
            "shortname": "StartTls",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "lib/core/starttls.js",
            "line": 11,
            "description": "Provides the StartTls command used to start a TLS session with Riak.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "the function to call when the command completes or errors",
                    "type": "Function"
                }
            ],
            "extends": "CommandBase"
        },
        "Client": {
            "name": "Client",
            "shortname": "Client",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Client",
            "namespace": "",
            "file": "lib/client.js",
            "line": 31,
            "description": "A Class that represents a Riak client.\n\nThe client constructor accepts a {{#crossLink \"RiakCluster\"}}{{/crossLink}}, or a list of host[:port] from\nwhich it will create a RiakCluster using our default configuration. \n\n    var Riak = require('basho-riak-client');\n    var client = new Riak.Client(['192.168.1.1:8087', '192.168.1.2:8087']);\n\nTwo styles of use are supported. Each command you can send to Riak is a \nclass and can be instantiated then executed by the client's execute() method.\nIn addition, convenience methods are provided directly by the Client class\nthat corrispond to each of the commands.\n\n    // Using the builder, but options can also be passed directly to the constructor\n    var fetch = new KV.FetchValue.Builder() \n                 .withBucket('myBucket')\n                 .withKey('myKey')\n                 .withCallback(callback)\n                 .build();\n                 \n    client.execute(fetch);\n    \nor\n\n    client.fetchValue({ bucket: 'myBucket', key: 'myKey' }, callback);\n    \nAll command callbacks are the typical node.js function(err, resp) style.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cluster",
                    "description": "- either an array of host[:port] strings or the cluster to use. See {{#crossLink \"RiakCluster\"}}{{/crossLink}}.",
                    "type": "String[]|RiakCluster"
                },
                {
                    "name": "callback",
                    "description": "- called when cluster is started (optional)",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "err",
                            "description": "- set to an error if one occurrs during start.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "client",
                            "description": "- the client object.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "cluster",
                            "description": "- the cluster object.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "lib/commands/crdt/fetchcounter.js",
            "line": 118,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchcounter.js",
            "line": 128,
            "description": "Set the bucket type.\nIf not supplied, 'default' is used.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchcounter.js",
            "line": 139,
            "description": "Set the key.",
            "itemtype": "method",
            "name": "withKey",
            "params": [
                {
                    "name": "key",
                    "description": "the key in riak.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchcounter.js",
            "line": 149,
            "description": "Set the R value.\nIf not asSet the bucket default is used.",
            "itemtype": "method",
            "name": "withR",
            "params": [
                {
                    "name": "r",
                    "description": "the R value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "FetchCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchcounter.js",
            "line": 160,
            "description": "Set the PR value.\nIf not asSet the bucket default is used.",
            "itemtype": "method",
            "name": "withPr",
            "params": [
                {
                    "name": "pr",
                    "description": "the PR value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "FetchCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchcounter.js",
            "line": 183,
            "description": "Set the basic_quorum value.\nThe parameter controls whether a read request should return early in\nsome fail cases.\nE.g. If a quorum of nodes has already\nreturned notfound/error, don't wait around for the rest.",
            "itemtype": "method",
            "name": "withBasicQuorum",
            "params": [
                {
                    "name": "useBasicQuorum",
                    "description": "the basic_quorum value.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "FetchCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchcounter.js",
            "line": 197,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "FetchCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchcounter.js",
            "line": 207,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "counterValue",
                                    "description": "The counter value in Riak.",
                                    "type": "Number"
                                },
                                {
                                    "name": "isNotFound",
                                    "description": "True if there was no counter in Riak.",
                                    "type": "Boolean"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "FetchCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchcounter.js",
            "line": 221,
            "description": "Construct a FetchCounter instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "FetchCounter"
            },
            "class": "FetchCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchmap.js",
            "line": 132,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchmap.js",
            "line": 142,
            "description": "Set the bucket type.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchmap.js",
            "line": 152,
            "description": "Set the key.",
            "itemtype": "method",
            "name": "withKey",
            "params": [
                {
                    "name": "key",
                    "description": "the key in riak.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchmap.js",
            "line": 162,
            "description": "Return sets as arrays of Buffers rather than strings.\nBy default the contents of sets are converted to strings. Setting this\nto true will cause this not to occur and the raw bytes returned\nas Buffer objects.",
            "itemtype": "method",
            "name": "withSetsAsBuffers",
            "params": [
                {
                    "name": "setsAsBuffers",
                    "description": "true to not convert set contents to strings.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "FetchMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchmap.js",
            "line": 175,
            "description": "Set the R value.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withR",
            "params": [
                {
                    "name": "r",
                    "description": "the R value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "FetchMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchmap.js",
            "line": 186,
            "description": "Set the PR value.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withPr",
            "params": [
                {
                    "name": "pr",
                    "description": "the PR value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "FetchMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchmap.js",
            "line": 209,
            "description": "Set the basic_quorum value.\nThe parameter controls whether a read request should return early in\nsome fail cases.\nE.g. If a quorum of nodes has already\nreturned notfound/error, don't wait around for the rest.",
            "itemtype": "method",
            "name": "withBasicQuorum",
            "params": [
                {
                    "name": "useBasicQuorum",
                    "description": "the basic_quorum value.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "FetchMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchmap.js",
            "line": 223,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "FetchMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchmap.js",
            "line": 233,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak. If no map is in Riak for the key, values will be null.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "context",
                                    "description": "An opaque context to be used in any subsequent modification of the map.",
                                    "type": "Buffer"
                                },
                                {
                                    "name": "map",
                                    "description": "The map in Riak, converted to a JS object.",
                                    "type": "Object"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "FetchMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchmap.js",
            "line": 247,
            "description": "Construct a FetchMap instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "FetchMap"
            },
            "class": "FetchMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchset.js",
            "line": 150,
            "description": "Construct a SetchSet instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "FetchSet"
            },
            "class": "FetchSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchset.js",
            "line": 173,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback.err",
                    "description": "An error message. Will be null if no error.",
                    "type": "String"
                },
                {
                    "name": "callback.response",
                    "description": "The response from Riak.",
                    "type": "Object"
                },
                {
                    "name": "callback.response.context",
                    "description": "An opaque context to be used in any subsequent modification of the set.",
                    "type": "Buffer"
                },
                {
                    "name": "callback.response.values",
                    "description": "An array holding the values in the set. String by default, Buffers if setsAsBuffers was used.",
                    "type": "String[]|Buffer[]"
                },
                {
                    "name": "callback.response.isNotFound",
                    "description": "True if there was no set in Riak.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "FetchSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchset.js",
            "line": 184,
            "description": "Set the bucket type.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchset.js",
            "line": 191,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchset.js",
            "line": 198,
            "description": "Set the key.",
            "itemtype": "method",
            "name": "withKey",
            "params": [
                {
                    "name": "key",
                    "description": "the key in riak.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchset.js",
            "line": 205,
            "description": "Set the R value.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withR",
            "params": [
                {
                    "name": "r",
                    "description": "the R value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "FetchSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchset.js",
            "line": 213,
            "description": "Set the PR value.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withPr",
            "params": [
                {
                    "name": "pr",
                    "description": "the PR value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "FetchSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchset.js",
            "line": 221,
            "description": "Return sets as arrays of Buffers rather than strings.\nBy default the contents of sets are converted to strings. Setting this\nto true will cause this not to occur and the raw bytes returned\nas Buffer objects.",
            "itemtype": "method",
            "name": "withSetsAsBuffers",
            "params": [
                {
                    "name": "setsAsBuffers",
                    "description": "true to not convert set contents to strings.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "FetchSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchset.js",
            "line": 231,
            "description": "Set the not_found_ok value.\nIf true a vnode returning notfound for a key increments the r tally.\nFalse is higher consistency, true is higher availability.\nIf not asSet the bucket default is used.",
            "itemtype": "method",
            "name": "withNotFoundOk",
            "params": [
                {
                    "name": "notFoundOk",
                    "description": "the not_found_ok value.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "FetchSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchset.js",
            "line": 241,
            "description": "Set the basic_quorum value.\nThe parameter controls whether a read request should return early in\nsome fail cases.\nE.g. If a quorum of nodes has already\nreturned notfound/error, don't wait around for the rest.",
            "itemtype": "method",
            "name": "withBasicQuorum",
            "params": [
                {
                    "name": "useBasicQuorum",
                    "description": "the basic_quorum value.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "FetchSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/fetchset.js",
            "line": 252,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "FetchSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatecounter.js",
            "line": 138,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatecounter.js",
            "line": 148,
            "description": "Set the bucket type.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatecounter.js",
            "line": 159,
            "description": "Set the key.\nIf not set Riak will generate one.",
            "itemtype": "method",
            "name": "withKey",
            "params": [
                {
                    "name": "key",
                    "description": "the key in riak.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatecounter.js",
            "line": 170,
            "description": "Set the increment to apply to this counter.\nThis may be negative as well as positive.",
            "itemtype": "method",
            "name": "withIncrement",
            "params": [
                {
                    "name": "increment",
                    "description": "the amount to increment (negative to decrement)",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatecounter.js",
            "line": 181,
            "description": "Set the W value.\nHow many replicas to write to before returning a successful response.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withW",
            "params": [
                {
                    "name": "w",
                    "description": "the W value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatecounter.js",
            "line": 193,
            "description": "Set the DW value.\nHow many replicas to commit to durable storage before returning a successful response.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withDw",
            "params": [
                {
                    "name": "dw",
                    "description": "the DW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatecounter.js",
            "line": 205,
            "description": "Set the PW value.\nHow many primary nodes must be up when the write is attempted.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withPw",
            "params": [
                {
                    "name": "pw",
                    "description": "the PW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatecounter.js",
            "line": 217,
            "description": "Return the counter after updating.",
            "itemtype": "method",
            "name": "withReturnBody",
            "params": [
                {
                    "name": "returnBody",
                    "description": "true to return the counter.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "UpdateCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatecounter.js",
            "line": 227,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatecounter.js",
            "line": 237,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak. Will ne null if returnBody not set.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "generatedKey",
                                    "description": "If no key was supplied, Riak will generate and return one here.",
                                    "type": "String"
                                },
                                {
                                    "name": "counterValue",
                                    "description": "The value of the counter in Riak.",
                                    "type": "Number"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "UpdateCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatecounter.js",
            "line": 251,
            "description": "Construct a UpdateCounter instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "a UpdateCounter instance",
                "type": "UpdateCounter"
            },
            "class": "UpdateCounter.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 293,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 303,
            "description": "Set the bucket type.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 313,
            "description": "Set the key.\nIf not set, riak will generate and return a key.",
            "itemtype": "method",
            "name": "withKey",
            "params": [
                {
                    "name": "key",
                    "description": "the key in riak.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 324,
            "description": "Set the modifications to make to this map.",
            "itemtype": "method",
            "name": "withMapOperation",
            "params": [
                {
                    "name": "mapOp",
                    "description": "the modifications",
                    "type": "MapOperation"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 334,
            "description": "The context returned from a previous fetch of this map.\n__Note:__ this is required when performing any removes.",
            "itemtype": "method",
            "name": "withContext",
            "params": [
                {
                    "name": "context",
                    "description": "the contect from a previous fetch.",
                    "type": "Buffer"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 345,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak. Will be null if returnBody is not set.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "generatedKey",
                                    "description": "If no key was supplied, Riak will generate and return one here.",
                                    "type": "String"
                                },
                                {
                                    "name": "context",
                                    "description": "An opaque context to be used in any subsequent modification of the map.",
                                    "type": "Buffer"
                                },
                                {
                                    "name": "map",
                                    "description": "The map in Riak, converted to a JS object.",
                                    "type": "Object"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 360,
            "description": "Set the W value.\nHow many replicas to write to before returning a successful response.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withW",
            "params": [
                {
                    "name": "w",
                    "description": "the W value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 372,
            "description": "Set the DW value.\nHow many replicas to commit to durable storage before returning a successful response.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withDw",
            "params": [
                {
                    "name": "dw",
                    "description": "the DW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 384,
            "description": "Set the PW value.\nHow many primary nodes must be up when the write is attempted.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withPw",
            "params": [
                {
                    "name": "pw",
                    "description": "the PW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 396,
            "description": "Return the counter after updating.",
            "itemtype": "method",
            "name": "withReturnBody",
            "params": [
                {
                    "name": "returnBody",
                    "description": "true to return the counter.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 406,
            "description": "Return sets as arrays of Buffers rather than strings.\nBy default the contents of sets are converted to strings. Setting this\nto true will cause this not to occur and the raw bytes returned\nas Buffer objects. Note this is only used with the returnBody option.",
            "itemtype": "method",
            "name": "withSetsAsBuffers",
            "params": [
                {
                    "name": "setsAsBuffers",
                    "description": "true to not convert set contents to strings.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 419,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 429,
            "description": "Construct an UpdateMap instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "UpdateMap"
            },
            "class": "UpdateMap.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 469,
            "description": "Increment (and/or create) a counter inside the map.",
            "itemtype": "method",
            "name": "incrementCounter",
            "params": [
                {
                    "name": "key",
                    "description": "the key in the map for this counter.",
                    "type": "String"
                },
                {
                    "name": "increment",
                    "description": "the amount to increment (or decrement if negative)",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.MapOperation",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 486,
            "description": "Remove a counter from a map.",
            "itemtype": "method",
            "name": "removeCounter",
            "params": [
                {
                    "name": "key",
                    "description": "the key in the map for this counter.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.MapOperation",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 499,
            "description": "Add a value to a set (and create is necessary) in a map.",
            "itemtype": "method",
            "name": "addToSet",
            "params": [
                {
                    "name": "key",
                    "description": "the key for the set in the map.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value to add to the set.",
                    "type": "String|Buffer"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.MapOperation",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 516,
            "description": "Remove a value from a set in a map.",
            "itemtype": "method",
            "name": "removeFromSet",
            "params": [
                {
                    "name": "key",
                    "description": "the key for the set in the map.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value to remove from the set.",
                    "type": "String|Buffer"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.MapOperation",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 533,
            "description": "Remove a set from a map.",
            "itemtype": "method",
            "name": "removeSet",
            "params": [
                {
                    "name": "key",
                    "description": "the key for the set in the map.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.MapOperation",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 547,
            "description": "Set a register in a map.",
            "itemtype": "method",
            "name": "setRegister",
            "params": [
                {
                    "name": "key",
                    "description": "the key for the register in the map.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value for the register.",
                    "type": "String|Buffer"
                }
            ],
            "chainable": "}",
            "class": "UpdateMap.MapOperation",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 564,
            "description": "Remove a register from a map.",
            "itemtype": "method",
            "name": "removeRegister",
            "params": [
                {
                    "name": "key",
                    "description": "the key for the register in the map.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.MapOperation",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 577,
            "description": "Set a flag in a map.",
            "itemtype": "method",
            "name": "setFlag",
            "params": [
                {
                    "name": "key",
                    "description": "the key for the set in the map.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value for the flag.",
                    "type": "Boolean"
                }
            ],
            "chainable": "}",
            "class": "UpdateMap.MapOperation",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 594,
            "description": "Remove a flag from a map.",
            "itemtype": "method",
            "name": "removeFlag",
            "params": [
                {
                    "name": "key",
                    "description": "the key for the flag in the map.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.MapOperation",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 607,
            "description": "Access/create a map inside the current one.\nThis adds/accesses a nested map and returns a reference to another\nMapOperation that applies to it. You can then modify the components of\nthat map;\n\n    mapOp.map('inner_map')\n        .incrementCounter('counter_1', 50)\n        .addToSet('set_2', 'set_value_2');",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "key",
                    "description": "the key for the nested map in the current map.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.MapOperation",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updatemap.js",
            "line": 631,
            "description": "Remove a map from a map.",
            "itemtype": "method",
            "name": "removeMap",
            "params": [
                {
                    "name": "key",
                    "description": "the key for the map in the map.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateMap.MapOperation",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 195,
            "description": "Construct an UpdateSet instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "UpdateSet"
            },
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 217,
            "description": "Set the callback.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak. will be null if returnBody is not set.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "generatedKey",
                                    "description": "If no key was supplied, Riak will generate and return one here.",
                                    "type": "String"
                                },
                                {
                                    "name": "context",
                                    "description": "An opaque context to be used in any subsequent modification of the set.",
                                    "type": "Buffer"
                                },
                                {
                                    "name": "values",
                                    "description": "An array holding the values in the set. String by default, Buffers if setsAsBuffers was used.",
                                    "type": "String[]|Buffer[]"
                                }
                            ]
                        }
                    ]
                }
            ],
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 228,
            "description": "Set the bucket type.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 235,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 242,
            "description": "Set the key.\nIf this is not set one will be generated by and returned from Riak",
            "itemtype": "method",
            "name": "withKey",
            "params": [
                {
                    "name": "key",
                    "description": "the key in riak.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 250,
            "description": "Set the causal context. The context is necessary for set removals. It is\nan opaque field, and should not be parsed or modified.",
            "itemtype": "method",
            "name": "withContext",
            "params": [
                {
                    "name": "context",
                    "description": "the causal context",
                    "type": "ByteBuffer"
                }
            ],
            "chainable": 1,
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 258,
            "description": "Return sets as arrays of Buffers rather than strings.\nBy default the contents of sets are converted to strings. Setting this\nto true will cause this not to occur and the raw bytes returned\nas Buffer objects.",
            "itemtype": "method",
            "name": "withSetsAsBuffers",
            "params": [
                {
                    "name": "setsAsBuffers",
                    "description": "true to not convert set contents to strings.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 268,
            "description": "Set the W value.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withW",
            "params": [
                {
                    "name": "w",
                    "description": "the W value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 277,
            "description": "Set the DW value.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withDw",
            "params": [
                {
                    "name": "dw",
                    "description": "the DW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 285,
            "description": "Set the PW value.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withPw",
            "params": [
                {
                    "name": "pw",
                    "description": "the PW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 293,
            "description": "Set the return_body value.\nIf true, the callback is passed the contents of the set after the update.",
            "itemtype": "method",
            "name": "withReturnBody",
            "params": [
                {
                    "name": "returnBody",
                    "description": "the return_body value.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 301,
            "description": "Set the basic_quorum value.\nThe parameter controls whether a read request should return early in\nsome fail cases.\nE.g. If a quorum of nodes has already\nreturned notfound/error, don't wait around for the rest.",
            "itemtype": "method",
            "name": "withBasicQuorum",
            "params": [
                {
                    "name": "useBasicQuorum",
                    "description": "the basic_quorum value.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 312,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 319,
            "description": "The values you wish to add to this set.",
            "itemtype": "method",
            "name": "withAdditions",
            "params": [
                {
                    "name": "additions",
                    "description": "The values to add.",
                    "type": "String[]|Buffer[]"
                }
            ],
            "chainable": 1,
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/crdt/updateset.js",
            "line": 326,
            "description": "The values you wish to remove from this set.\n__Note:__ when performing removals a context must be provided.",
            "itemtype": "method",
            "name": "withRemovals",
            "params": [
                {
                    "name": "removals",
                    "description": "The values to remove.",
                    "type": "String[]|Buffer[]"
                }
            ],
            "chainable": 1,
            "class": "UpdateSet.Builder",
            "module": "CRDT"
        },
        {
            "file": "lib/commands/kv/deletevalue.js",
            "line": 140,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "DeleteValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/deletevalue.js",
            "line": 150,
            "description": "Set the bucket type.\nIf not supplied, 'default' is used.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "DeleteValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/deletevalue.js",
            "line": 161,
            "description": "Set the key.",
            "itemtype": "method",
            "name": "withKey",
            "params": [
                {
                    "name": "key",
                    "description": "the key in riak.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "DeleteValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/deletevalue.js",
            "line": 171,
            "description": "Set the R value.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withR",
            "params": [
                {
                    "name": "r",
                    "description": "the R value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "DeleteValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/deletevalue.js",
            "line": 182,
            "description": "Set the PR value.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withPr",
            "params": [
                {
                    "name": "pr",
                    "description": "the PR value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "DeleteValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/deletevalue.js",
            "line": 193,
            "description": "Set the W value.\nHow many replicas to write to before returning a successful response.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withW",
            "params": [
                {
                    "name": "w",
                    "description": "the W value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "DeleteValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/deletevalue.js",
            "line": 205,
            "description": "Set the DW value.\nHow many replicas to commit to durable storage before returning a successful response.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withDw",
            "params": [
                {
                    "name": "dw",
                    "description": "the DW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "DeleteValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/deletevalue.js",
            "line": 217,
            "description": "Set the PW value.\nHow many primary nodes must be up when the write is attempted.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withPw",
            "params": [
                {
                    "name": "pw",
                    "description": "the PW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "DeleteValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/deletevalue.js",
            "line": 229,
            "description": "Set the RW value.\nQuorum for both operations (get and put) involved in deleting an object .",
            "itemtype": "method",
            "name": "withRw",
            "params": [
                {
                    "name": "rw",
                    "description": "the RW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "DeleteValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/deletevalue.js",
            "line": 240,
            "description": "Set the vector clock.\nIf not set siblings may be created depending on bucket properties.",
            "itemtype": "method",
            "name": "withVClock",
            "params": [
                {
                    "name": "vclock",
                    "description": "a vector clock returned from a previous fetch",
                    "type": "Buffer"
                }
            ],
            "class": "DeleteValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/deletevalue.js",
            "line": 250,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "DeleteValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/deletevalue.js",
            "line": 260,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null on no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak. Will be true unless there was an error.",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "DeleteValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/deletevalue.js",
            "line": 272,
            "description": "Construct a DeleteValue command.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "an instance of DeleteValue",
                "type": "DeleteValue"
            },
            "class": "DeleteValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchbucketprops.js",
            "line": 75,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchBucketProps.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchbucketprops.js",
            "line": 86,
            "description": "Construct a FetchBucketProps instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "FetchBucketProps"
            },
            "class": "FetchBucketProps.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchbuckettypeprops.js",
            "line": 70,
            "description": "Construct a FetchBucketTypeProps instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "FetchBucketTypeProps"
            },
            "class": "FetchBucketTypeProps.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchpreflist.js",
            "line": 110,
            "description": "Set the bucket type.\nIf not supplied, 'default' is used.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchPreflist.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchpreflist.js",
            "line": 121,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchPreflist.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchpreflist.js",
            "line": 131,
            "description": "Set the key.",
            "itemtype": "method",
            "name": "withKey",
            "params": [
                {
                    "name": "key",
                    "description": "the key in riak.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchPreflist.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchpreflist.js",
            "line": 141,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "preflist",
                                    "description": "An array of one or more preflist items.",
                                    "type": "Object[]"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "FetchPreflist.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchpreflist.js",
            "line": 154,
            "description": "Construct a FetchPreflist command.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "FetchPreflist"
            },
            "class": "FetchPreflist.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchpropsbase.js",
            "line": 115,
            "description": "Set the bucket type.\nIf not supplied, 'default' is used.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchPropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchpropsbase.js",
            "line": 127,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak. This is an oject with all the bucket properties.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "FetchPropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 179,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 189,
            "description": "Set the bucket type.\nIf not supplied, 'default' is used.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 200,
            "description": "Set the key.",
            "itemtype": "method",
            "name": "withKey",
            "params": [
                {
                    "name": "key",
                    "description": "the key in riak.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 210,
            "description": "Set the R value.\nIf not asSet the bucket default is used.",
            "itemtype": "method",
            "name": "withR",
            "params": [
                {
                    "name": "r",
                    "description": "the R value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 221,
            "description": "Set the PR value.\nIf not asSet the bucket default is used.",
            "itemtype": "method",
            "name": "withPr",
            "params": [
                {
                    "name": "pr",
                    "description": "the PR value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 232,
            "description": "Set the not_found_ok value.\nIf true a vnode returning notfound for a key increments the r tally.\nFalse is higher consistency, true is higher availability.\nIf not asSet the bucket default is used.",
            "itemtype": "method",
            "name": "withNotFoundOk",
            "params": [
                {
                    "name": "notFoundOk",
                    "description": "the not_found_ok value.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 245,
            "description": "Set the basic_quorum value.\nThe parameter controls whether a read request should return early in\nsome fail cases.\nE.g. If a quorum of nodes has already\nreturned notfound/error, don't wait around for the rest.",
            "itemtype": "method",
            "name": "withBasicQuorum",
            "params": [
                {
                    "name": "useBasicQuorum",
                    "description": "the basic_quorum value.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 259,
            "description": "Set whether to return tombstones.",
            "itemtype": "method",
            "name": "withReturnDeletedVClock",
            "params": [
                {
                    "name": "returnDeletedVClock",
                    "description": "true to return tombstones, false otherwise.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 269,
            "description": "Return only the metadata.\nCauses Riak to only return the metadata for the object. The value\nwill be asSet to null.",
            "itemtype": "method",
            "name": "withHeadOnly",
            "params": [
                {
                    "name": "headOnly",
                    "description": "true to return only metadata.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 281,
            "description": "Return the object if the supplied vclock does not match.",
            "itemtype": "method",
            "name": "withIfModified",
            "params": [
                {
                    "name": "vclock",
                    "description": "the vclock to match on",
                    "type": "Buffer"
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 291,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 302,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "isNotFound",
                                    "description": "True if there was no value in Riak.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "isUnchanged",
                                    "description": "True if the object has not changed (based on a vclock provided via ifModified)",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "vclock",
                                    "description": "The vector clock for this object (and its siblings)",
                                    "type": "Buffer"
                                },
                                {
                                    "name": "values",
                                    "description": "An array of one or more values. Either RiakObjects or JS objects if convertToJs was used.",
                                    "type": "Object[]|RiakObject[]"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 318,
            "description": "Provide a conflict resolver to resolve siblings.\nIf siblings are present Riak will return all of them. The provided\nfunction will be used to resolve these to a single response.\n\nIf a conflict resolver is not provided all siblings will be returned.",
            "itemtype": "method",
            "name": "withConflictResolver",
            "params": [
                {
                    "name": "conflictResolver",
                    "description": "- the conflict resolver to be used.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 332,
            "description": "Convert the value stored in Riak to a JS object.\nValues are stored in Riak as bytes. Setting this to true will\nconvert the value to a JS object using JSON.parse() before\npassing them to the conflict resolver.",
            "itemtype": "method",
            "name": "withConvertValueToJs",
            "params": [
                {
                    "name": "convert",
                    "description": "- true to convert the value(s), false otherwise.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/fetchvalue.js",
            "line": 345,
            "description": "Construct a FetchValue command.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "FetchValue"
            },
            "class": "FetchValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/listbuckets.js",
            "line": 107,
            "description": "Set the bucket type.\nIf not supplied, 'default' is used.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "ListBuckets.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/listbuckets.js",
            "line": 118,
            "description": "Stream the results.\nSetting this to true will cause you callback to be called as the results\nare returned from Riak. Set to false the result set will be buffered and\ndelevered via a single call to your callback. Note that on large result sets\nthis is very memory intensive.",
            "itemtype": "method",
            "name": "withStreaming",
            "params": [
                {
                    "name": "stream",
                    "description": "Set whether or not to stream the results",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "chainable": 1,
            "class": "ListBuckets.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/listbuckets.js",
            "line": 132,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "buckets",
                                    "description": "The buckets returned from Riak.",
                                    "type": "String[]"
                                },
                                {
                                    "name": "done",
                                    "description": "True if you have received all the buckets.",
                                    "type": "Boolean"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "ListBuckets.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/listbuckets.js",
            "line": 146,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "ListBuckets.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/listbuckets.js",
            "line": 156,
            "description": "Construct a ListBuckets instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "ListBuckets"
            },
            "class": "ListBuckets.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/listkeys.js",
            "line": 115,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "ListKeys.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/listkeys.js",
            "line": 125,
            "description": "Set the bucket type.\nIf not supplied, 'default' is used.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "ListKeys.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/listkeys.js",
            "line": 136,
            "description": "Stream the results.\nSetting this to true will cause you callback to be called as the results\nare returned from Riak. Set to false the result set will be buffered and\ndelevered via a single call to your callback. Note that on large result sets\nthis is very memory intensive.",
            "itemtype": "method",
            "name": "withStreaming",
            "params": [
                {
                    "name": "stream",
                    "description": "Set whether or not to stream the results",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "chainable": 1,
            "class": "ListKeys.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/listkeys.js",
            "line": 150,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the keys returned from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "done",
                                    "description": "True if you have received all the keys.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "bucketType",
                                    "description": "The bucketType the keys are from.",
                                    "type": "String"
                                },
                                {
                                    "name": "bucket",
                                    "description": "The bucket the keys are from.",
                                    "type": "String"
                                },
                                {
                                    "name": "keys",
                                    "description": "The array of keys.",
                                    "type": "String[]"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "ListKeys.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/listkeys.js",
            "line": 166,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "ListKeys.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/listkeys.js",
            "line": 176,
            "description": "Construct a ListKeys instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "ListKeys"
            },
            "class": "ListKeys.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 30,
            "description": "Set the key.",
            "itemtype": "method",
            "name": "setKey",
            "params": [
                {
                    "name": "key",
                    "description": "the key in Riak.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 40,
            "description": "Get the key.",
            "itemtype": "method",
            "name": "getKey",
            "return": {
                "description": "the key.",
                "type": "String"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 48,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "setBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 58,
            "description": "Get the bucket.",
            "itemtype": "method",
            "name": "getBucket",
            "return": {
                "description": "the bucket.",
                "type": "String"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 66,
            "description": "Set the bucket type.\n\nIf this is not set 'default' is used.",
            "itemtype": "method",
            "name": "setBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in Riak.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 78,
            "description": "Get the bucket type.",
            "itemtype": "method",
            "name": "getBucketType",
            "return": {
                "description": "the bucket type.",
                "type": "String"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 86,
            "description": "Set the value.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "the value stored in Riak.",
                    "type": "String|Buffer|Object"
                }
            ],
            "chainable": 1,
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 96,
            "description": "Get the value.\n\nThis will either be a Buffer or a plain JS object.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "The value returned from Riak.",
                "type": "Buffer|Object"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 106,
            "description": "Set the content type.\n \nDue to Riak's HTTP API this is represented as a string suitable for\na HTTP Content-Type header. \n\nIf not set, the default is 'application/json'",
            "itemtype": "method",
            "name": "setContentType",
            "params": [
                {
                    "name": "contentType",
                    "description": "the content type.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 121,
            "description": "Get the content type.\n\nDue to Riak's HTTP API this is represented as a string suitable for\na HTTP Content-Type header.",
            "itemtype": "method",
            "name": "getContentType",
            "return": {
                "description": "the content type.",
                "type": "String"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 132,
            "description": "Set the content encoding.",
            "itemtype": "method",
            "name": "setContentEncoding",
            "params": [
                {
                    "name": "contentEncoding",
                    "description": "the content encoding",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 143,
            "description": "Get the content encoding",
            "itemtype": "method",
            "name": "getContentEncoding",
            "return": {
                "description": "the content encoding",
                "type": "String"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 152,
            "description": "Set the user meta data.\n\nThis is an array of key/value objects.",
            "itemtype": "method",
            "name": "setUserMeta",
            "params": [
                {
                    "name": "userMeta",
                    "description": "",
                    "type": "Object[]",
                    "props": [
                        {
                            "name": "key",
                            "description": "usermeta key",
                            "type": "String"
                        },
                        {
                            "name": "value",
                            "description": "usermeat value",
                            "type": "String"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 166,
            "description": "Determine if any user metadata is present.",
            "itemtype": "method",
            "name": "hasUserMeta",
            "return": {
                "description": "true if user meta data is present.",
                "type": "Boolean"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 174,
            "description": "Get the user meta data\n\nThis is an array of key/value objects",
            "itemtype": "method",
            "name": "getUserMeta",
            "return": {
                "description": "array of key/value objects",
                "type": "Object[]"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 184,
            "description": "Set an index, replacing the existing value if any.",
            "itemtype": "method",
            "name": "setIndex",
            "params": [
                {
                    "name": "indexName",
                    "description": "the index name",
                    "type": "String"
                },
                {
                    "name": "arrayOfKeys",
                    "description": "- the keys",
                    "type": "String[]|Number[]"
                }
            ],
            "chainable": 1,
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 198,
            "description": "Determine if any indexes are present.",
            "itemtype": "method",
            "name": "hasIndexes",
            "return": {
                "description": "true if indexes are present.",
                "type": "Boolean"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 206,
            "description": "Get all indexes.",
            "itemtype": "method",
            "name": "getIndexes",
            "return": {
                "description": "an object whose fields are the index names holding arrays of keys",
                "type": "Object"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 215,
            "description": "Get the keys for an index.",
            "itemtype": "method",
            "name": "getIndex",
            "params": [
                {
                    "name": "indexName",
                    "description": "the name of the index",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the keys",
                "type": "String[]"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 228,
            "description": "Add one or more keys to an index.\n\nIf the index does not exist it will be created.",
            "itemtype": "method",
            "name": "addToIndex",
            "params": [
                {
                    "name": "indexName",
                    "description": "the index name",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "1 or more keys to add",
                    "type": "String|Number",
                    "multiple": true
                }
            ],
            "chainable": 1,
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 249,
            "description": "Determine if any links are present.\n\nNote that link walking is a deprecated feature in Riak 2.0.\n\nSee: [Link Walking](http://docs.basho.com/riak/latest/dev/using/link-walking/)",
            "itemtype": "method",
            "name": "hasLinks",
            "return": {
                "description": "true if there are any links.",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Link walking is a deprecated feature in Riak 2.0.",
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 262,
            "description": "Get the links.\n\nThis is an array of objects representing links to other objects in Riak.\n\nNote that link walking is a deprecated feature in Riak 2.0.\n\nSee: [Link Walking](http://docs.basho.com/riak/latest/dev/using/link-walking/)",
            "itemtype": "method",
            "name": "getLinks",
            "return": {
                "description": "An array containing the links, or undefined if none exist.",
                "type": "Object[]"
            },
            "deprecated": true,
            "deprecationMessage": "Link walking is a deprecated feature in Riak 2.0.",
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 277,
            "description": "Set the links.\n\nThis is an array of objects representing links to other objects in Riak.\n\nNote that link walking is a deprecated feature in Riak 2.0.\n\nSee: [Link Walking](http://docs.basho.com/riak/latest/dev/using/link-walking/)",
            "itemtype": "method",
            "name": "setLinks",
            "params": [
                {
                    "name": "links",
                    "description": "An array of objects representing the links.",
                    "type": "Object[]",
                    "props": [
                        {
                            "name": "bucket",
                            "description": "The bucket the linked object is in.",
                            "type": "String"
                        },
                        {
                            "name": "key",
                            "description": "The key for the linked object.",
                            "type": "String"
                        },
                        {
                            "name": "tag",
                            "description": "The identifier that describes the relationship you are wishing to capture with your link",
                            "type": "String"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "deprecated": true,
            "deprecationMessage": "Link walking is a deprecated feature in Riak 2.0.",
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 297,
            "description": "Set the vector clock.",
            "itemtype": "method",
            "name": "setVClock",
            "params": [
                {
                    "name": "vclock",
                    "description": "the vclock retrieved from Riak",
                    "type": "Buffer"
                }
            ],
            "chainable": 1,
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 307,
            "description": "Get the vector clock.",
            "itemtype": "method",
            "name": "getVClock",
            "return": {
                "description": "The vector clock retrieved from Riak.",
                "type": "Buffer"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 315,
            "description": "Returns whether or not this RiakObject is marked as being deleted (a tombstone)",
            "itemtype": "method",
            "name": "getIsTombstone",
            "return": {
                "description": "true if this is a tombstone.",
                "type": "Boolean"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 323,
            "description": "Returns the last modified time of this RiakObject.\n\nThe timestamp is returned as a (Unix) epoch time.",
            "itemtype": "method",
            "name": "getLastModified",
            "return": {
                "description": "the last modified time.",
                "type": "Number"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/riakobject.js",
            "line": 430,
            "description": "Creates and returns a RpbContent protobuf from a value and meta.\n\nIf the value is a JS Object it is converted using JSON.stringify().",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "populateRpbContentFromRiakObject",
            "static": 1,
            "params": [
                {
                    "name": "ro",
                    "description": "The RiakObject",
                    "type": "RiakObject"
                }
            ],
            "return": {
                "description": "a RpbContent protobuf",
                "type": "Object"
            },
            "class": "RiakObject",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 194,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "SecondaryIndexQuery.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 204,
            "description": "Set the bucket type.\nIf not supplied, 'default' is used.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "SecondaryIndexQuery.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 215,
            "description": "Set the index name",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "indexName",
                    "description": "the index to query",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "SecondaryIndexQuery.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 225,
            "description": "Set a single secondary index key to use for query.\nNote that you can only set a single key, or a range.",
            "itemtype": "method",
            "name": "withIndexKey",
            "params": [
                {
                    "name": "indexKey",
                    "description": "the secondary index key.",
                    "type": "String|Number"
                }
            ],
            "chainable": 1,
            "class": "SecondaryIndexQuery.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 236,
            "description": "Set a range for the query",
            "itemtype": "method",
            "name": "withRange",
            "params": [
                {
                    "name": "start",
                    "description": "the start of the range",
                    "type": "String|Number"
                },
                {
                    "name": "end",
                    "description": "the end of the range",
                    "type": "String|Number"
                }
            ],
            "chainable": 1,
            "class": "SecondaryIndexQuery.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 248,
            "description": "Set whether to return the index keys with the Riak object keys.\nSetting this to true will return both the index key and the Riak\nobject's key. The default is false (only to return the Riak object keys).",
            "itemtype": "method",
            "name": "withReturnKeyAndIndex",
            "params": [
                {
                    "name": "returnKeyAndIndex",
                    "description": "whether to return the index keys as well",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "SecondaryIndexQuery.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 260,
            "description": "Set the maximum number of results returned by the query.\n\nWhen asking for large result sets, it is often desirable to ask the\nservers to return chunks of results instead of a firehose.\nYou can do so using this method, where maxResults is the number of\nresults you'd like to receive.\n\nAssuming more keys are available, a continuation value will be included\nin the results to allow the client to request the next page.",
            "itemtype": "method",
            "name": "withMaxResults",
            "params": [
                {
                    "name": "maxResults",
                    "description": "the max number of results to return.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "SecondaryIndexQuery.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 278,
            "description": "Set the continuation for this query.\nIf using pagination via maxResults, this will have been returned\nby a previous query.",
            "itemtype": "method",
            "name": "withContinuation",
            "params": [
                {
                    "name": "continuation",
                    "description": "the continuation from a previous query",
                    "type": "Buffer"
                }
            ],
            "chainable": 1,
            "class": "SecondaryIndexQuery.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 290,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "SecondaryIndexQuery.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 300,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to be executed by the command.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "values",
                                    "description": "Object keys returned by the query, and optionally the index keys.",
                                    "type": "Object[]"
                                },
                                {
                                    "name": "done",
                                    "description": "True if you have received all the results.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "continuation",
                                    "description": "The continuation if a continuation was returned.",
                                    "type": "Buffer"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "SecondaryIndexQuery.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 315,
            "description": "Stream the results.\nSetting this to true will cause you callback to be called as the results\nare returned from Riak. Set to false the result set will be buffered and\ndelevered via a single call to your callback. Note that on large result sets\nthis is very memory intensive.",
            "itemtype": "method",
            "name": "withStreaming",
            "params": [
                {
                    "name": "stream",
                    "description": "Set whether or not to stream the results",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "chainable": 1,
            "class": "SecondaryIndexQuery.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 329,
            "description": "Set whether to sort the results of a non-paginated 2i query.\nIf you are not using pagination (setting withMaxResults()) the\ndefault behavior in Riak is to not sort the result set.\nSetting this to true will sort the results before returning them.\n__Note that this is not recommended for queries that could return a large\nresult set; the overhead in Riak is substantial. __",
            "itemtype": "method",
            "name": "withPaginationSort",
            "params": [
                {
                    "name": "paginationSort",
                    "description": "true to sort the results of a non-paginated query",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "SecondaryIndexQuery.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/secondaryindexquery.js",
            "line": 344,
            "description": "Construct a SecondaryIndexQuery instance",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "SecondaryIndexQuery"
            },
            "class": "SecondaryIndexQuery.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storebucketprops.js",
            "line": 80,
            "description": "Set the bucket.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "StoreBucketProps.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storebucketprops.js",
            "line": 91,
            "description": "Construct a StoreBucketProps instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "StoreBucketProps"
            },
            "class": "StoreBucketProps.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storebuckettypeprops.js",
            "line": 77,
            "description": "Construct a StoreBucketTypeProps instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "StoreBucketTypeProps"
            },
            "class": "StoreBucketTypeProps.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 162,
            "description": "Set the bucket type.\nIf not supplied, 'default' is used.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 174,
            "description": "Set the nVal.",
            "itemtype": "method",
            "name": "withNVal",
            "params": [
                {
                    "name": "nVal",
                    "description": "the number of replicas.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 185,
            "description": "Set the allow_multi value.",
            "itemtype": "method",
            "name": "withAllowMult",
            "params": [
                {
                    "name": "allowMult",
                    "description": "whether to allow sibling objects to be created.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 197,
            "description": "Set the last_write_wins value. Unless you really know what you're\ndoing, you probably do not want to set this to true.",
            "itemtype": "method",
            "name": "withLastWriteWins",
            "params": [
                {
                    "name": "lastWriteWins",
                    "description": "whether to ignore vector clocks when writing.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 209,
            "description": "Add a pre-commit hook.",
            "itemtype": "method",
            "name": "addPrecommitHook",
            "params": [
                {
                    "name": "precommitHook",
                    "description": "the hook to add.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 221,
            "description": "Add a pre-commit hook.",
            "itemtype": "method",
            "name": "addPostcommitHook",
            "params": [
                {
                    "name": "postcommitHook",
                    "description": "the hook to add.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 233,
            "description": "Set the old VClock value",
            "itemtype": "method",
            "name": "withOldVClock",
            "params": [
                {
                    "name": "oldVClock",
                    "description": "an epoch time value",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 244,
            "description": "Set the young VClock value",
            "itemtype": "method",
            "name": "withYoungVClock",
            "params": [
                {
                    "name": "youngVClock",
                    "description": "an epoch time value",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 255,
            "description": "Set the big VClock value.",
            "itemtype": "method",
            "name": "withBigVClock",
            "params": [
                {
                    "name": "bigVClock",
                    "description": "an epoch time value",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 266,
            "description": "Set the small VClock value.",
            "itemtype": "method",
            "name": "withSmallVClock",
            "params": [
                {
                    "name": "smallVClock",
                    "description": "an epoch time value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 277,
            "description": "Set the backend used by this bucket.\nOnly applies when using\nriak_kv_multi_backend in Riak.",
            "itemtype": "method",
            "name": "withBackend",
            "params": [
                {
                    "name": "backend",
                    "description": "the name of the backend to use.",
                    "type": "Sring"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 290,
            "description": "Set the R value.\nIf not asSet the bucket default is used.",
            "itemtype": "method",
            "name": "withR",
            "params": [
                {
                    "name": "r",
                    "description": "the R value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 302,
            "description": "Set the PR value.\nIf not asSet the bucket default is used.",
            "itemtype": "method",
            "name": "withPr",
            "params": [
                {
                    "name": "pr",
                    "description": "the PR value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 314,
            "description": "Set the W value.\nHow many replicas to write to before returning a successful response.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withW",
            "params": [
                {
                    "name": "w",
                    "description": "the W value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 327,
            "description": "Set the DW value.\nHow many replicas to commit to durable storage before returning a successful response.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withDw",
            "params": [
                {
                    "name": "dw",
                    "description": "the DW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 340,
            "description": "Set the PW value.\nHow many primary nodes must be up when the write is attempted.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withPw",
            "params": [
                {
                    "name": "pw",
                    "description": "the PW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 353,
            "description": "Set the RW value.\nQuorum for both operations (get and put) involved in deleting an object .",
            "itemtype": "method",
            "name": "withRw",
            "params": [
                {
                    "name": "rw",
                    "description": "the RW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 365,
            "description": "Set the basic_quorum value.\nThe parameter controls whether a read request should return early in\nsome fail cases.\nE.g. If a quorum of nodes has already\nreturned notfound/error, don't wait around for the rest.",
            "itemtype": "method",
            "name": "withBasicQuorum",
            "params": [
                {
                    "name": "useBasicQuorum",
                    "description": "the basic_quorum value.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 380,
            "description": "Set the not_found_ok value.\nIf true a vnode returning notfound for a key increments the r tally.\nFalse is higher consistency, true is higher availability.",
            "itemtype": "method",
            "name": "withNotFoundOk",
            "params": [
                {
                    "name": "notFoundOk",
                    "description": "the not_found_ok value.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 393,
            "description": "Enable Legacy Riak Search. Setting this to true causes the search\npre-commit hook to be added.\n\nNote this is only for legacy Riak (&lt; v2.0) Search support.",
            "itemtype": "method",
            "name": "withLegacySearchEnabled",
            "params": [
                {
                    "name": "search",
                    "description": "enable add/remove (true/false) the pre-commit hook for Legacy\nRiak Search.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 408,
            "description": "Associate a Search Index.\nThis only applies if Yokozuna is enabled in\nRiak v2.0.",
            "itemtype": "method",
            "name": "withSearchIndex",
            "params": [
                {
                    "name": "searchIndex",
                    "description": "The name of the search index to use.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 421,
            "description": "Set the chash_keyfun value.",
            "itemtype": "method",
            "name": "withChashkeyFunction",
            "params": [
                {
                    "name": "func",
                    "description": "a object representing the Erlang func to use.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storepropsbase.js",
            "line": 433,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will ne null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak. This is an oject with all the bucket properties.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "StorePropsBase",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 200,
            "description": "Set the bucket.\nNote that this can also be provided via RiakObject passed in via withContent() and\ndoing so will take precidence over this method.",
            "itemtype": "method",
            "name": "withBucket",
            "params": [
                {
                    "name": "bucket",
                    "description": "the bucket in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 212,
            "description": "Set the bucket type.\nIf not supplied, 'default' is used.\nNote that this can also be provided via RiakObject passed in via withContent() and\ndoing so will take precidence over this method.",
            "itemtype": "method",
            "name": "withBucketType",
            "params": [
                {
                    "name": "bucketType",
                    "description": "the bucket type in riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 225,
            "description": "Set the key.\nIf not set, riak will generate and return a key.\nNote that this can also be provided via RiakObject passed in via withContent() and\ndoing so will take precidence over this method.",
            "itemtype": "method",
            "name": "withKey",
            "params": [
                {
                    "name": "key",
                    "description": "the key in riak.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 238,
            "description": "Set the value and its metadata to be stored in Riak.\nIf a JS object is supplied, it will be converted to JSON\nusing JSON.stringify()",
            "itemtype": "method",
            "name": "withContent",
            "params": [
                {
                    "name": "value",
                    "description": "the data to store in Riak",
                    "type": "RiakObject|String|Buffer|Object"
                }
            ],
            "chainable": 1,
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 250,
            "description": "Set the vector clock.\nConvenience method if a RiakObject is not supplied as content.\nNote that a vclock supplied via RiakObject in withContent() will have precendence over this.",
            "itemtype": "method",
            "name": "withVClock",
            "params": [
                {
                    "name": "vclock",
                    "description": "a vector clock returned from a previous fetch",
                    "type": "Buffer"
                }
            ],
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 261,
            "description": "Set the W value.\nHow many replicas to write to before returning a successful response.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withW",
            "params": [
                {
                    "name": "w",
                    "description": "the W value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 273,
            "description": "Set the DW value.\nHow many replicas to commit to durable storage before returning a successful response.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withDw",
            "params": [
                {
                    "name": "dw",
                    "description": "the DW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 285,
            "description": "Set the PW value.\nHow many primary nodes must be up when the write is attempted.\nIf not set the bucket default is used.",
            "itemtype": "method",
            "name": "withPw",
            "params": [
                {
                    "name": "pw",
                    "description": "the PW value.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 297,
            "description": "Return the object after storing (including any siblings).\nIf siblings are present, an optional conflictResolver can be\nprovided to resolve them.",
            "itemtype": "method",
            "name": "withReturnBody",
            "params": [
                {
                    "name": "returnBody",
                    "description": "true to return the object.",
                    "type": "Boolean"
                },
                {
                    "name": "convertToJs",
                    "description": "convert the returned value(s) to JS objects using JSON.parse()",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "conflictResolver",
                    "description": "the conflict resolver",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "riakobjects",
                            "description": "array of RiakObjects returned by Riak.",
                            "type": "RiakObject[]"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 321,
            "description": "Return the metadata after storing the value.\n\nCauses Riak to only return the metadata for the object.\nIf siblings are present, an optional conflictResolver can be\nprovided to resolve them.",
            "itemtype": "method",
            "name": "withReturnHead",
            "params": [
                {
                    "name": "conflictResolver",
                    "description": "the conflict resolver",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "riakobjects",
                            "description": "array of RiakObjects returned by Riak.",
                            "type": "RiakObject[]"
                        }
                    ]
                },
                {
                    "name": "returnHead",
                    "description": "true to return only metadata.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 338,
            "description": "Set the if_not_modified flag.\n\nSetting this to true means to store the value only if the\nsupplied vclock matches the one in the database.\n\nBe aware there are several cases where this may not actually happen.\nUse of this feature is discouraged.",
            "itemtype": "method",
            "name": "withIfNotModified",
            "params": [
                {
                    "name": "ifNotModified",
                    "description": "the if_not_modified value.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 354,
            "description": "Set the if_none_match flag.\n\nSetting this to true means store the value only if this\nbucket/key combination are not already defined.\n\nBe aware that there are several cases where\nthis may not actually happen. Use of this option is discouraged.",
            "itemtype": "method",
            "name": "withIfNoneMatch",
            "params": [
                {
                    "name": "ifNoneMatch",
                    "description": "the if_non-match value.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 370,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 380,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The allback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "vclock",
                                    "description": "The vector clock for this object (and its siblings)",
                                    "type": "Buffer"
                                },
                                {
                                    "name": "values",
                                    "description": "An array of one or more values. Either RiakObjects or JS objects if convertToJs was used.",
                                    "type": "Object[]|RiakObject[]"
                                },
                                {
                                    "name": "generatedKey",
                                    "description": "The key generated by Riak if one was not supplied.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/kv/storevalue.js",
            "line": 395,
            "description": "Construct a StoreValue instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "a StoreValue instance",
                "type": "StoreValue"
            },
            "class": "StoreValue.Builder",
            "module": "KV"
        },
        {
            "file": "lib/commands/ts/bykeybase.js",
            "line": 65,
            "description": "Set the table.",
            "itemtype": "method",
            "name": "withTable",
            "params": [
                {
                    "name": "table",
                    "description": "the table in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "ByKeyBase.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/bykeybase.js",
            "line": 76,
            "description": "Set the key",
            "itemtype": "method",
            "name": "withKey",
            "params": [
                {
                    "name": "key",
                    "description": "the timeseries key value",
                    "type": "Object[]"
                }
            ],
            "chainable": 1,
            "class": "ByKeyBase.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/bykeybase.js",
            "line": 87,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The allback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "ByKeyBase.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/delete.js",
            "line": 65,
            "description": "Construct a Delete instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "a Delete instance",
                "type": "Delete"
            },
            "class": "Delete.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/describe.js",
            "line": 76,
            "description": "Set the timeseries table.",
            "itemtype": "method",
            "name": "withDescribe",
            "params": [
                {
                    "name": "table",
                    "description": "the timeseries table",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Describe.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/describe.js",
            "line": 86,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The allback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Describe.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/describe.js",
            "line": 98,
            "description": "Construct a Describe instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "a Describe instance",
                "type": "Describe"
            },
            "class": "Describe.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/get.js",
            "line": 70,
            "description": "Construct a Get instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "a Get instance",
                "type": "Get"
            },
            "class": "Get.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/listkeys.js",
            "line": 106,
            "description": "Set the table.",
            "itemtype": "method",
            "name": "withTable",
            "params": [
                {
                    "name": "table",
                    "description": "The table in Riak TS",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "ListKeys.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/listkeys.js",
            "line": 116,
            "description": "Stream the results.\nSetting this to true will cause you callback to be called as the results\nare returned from Riak TS. Set to false the result set will be buffered and\ndelevered via a single call to your callback. Note that on large result sets\nthis is very memory intensive.",
            "itemtype": "method",
            "name": "withStreaming",
            "params": [
                {
                    "name": "stream",
                    "description": "Set whether or not to stream the results",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "chainable": 1,
            "class": "ListKeys.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/listkeys.js",
            "line": 130,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the keys returned from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "done",
                                    "description": "True if you have received all the keys.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "table",
                                    "description": "The table the keys are from.",
                                    "type": "String"
                                },
                                {
                                    "name": "keys",
                                    "description": "The array of keys.",
                                    "type": "String[]"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "ListKeys.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/listkeys.js",
            "line": 145,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "ListKeys.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/listkeys.js",
            "line": 155,
            "description": "Construct a ListKeys instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "ListKeys"
            },
            "class": "ListKeys.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/query.js",
            "line": 90,
            "description": "Set the query text.",
            "itemtype": "method",
            "name": "withQuery",
            "params": [
                {
                    "name": "query",
                    "description": "the timeseries query",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Query.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/query.js",
            "line": 100,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The allback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Query.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/query.js",
            "line": 112,
            "description": "Construct a Query instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "a Query instance",
                "type": "Query"
            },
            "class": "Query.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/store.js",
            "line": 170,
            "description": "Set the table.",
            "itemtype": "method",
            "name": "withTable",
            "params": [
                {
                    "name": "table",
                    "description": "the table in Riak",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Store.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/store.js",
            "line": 180,
            "description": "Set the columns (optional).",
            "itemtype": "method",
            "name": "withColumns",
            "params": [
                {
                    "name": "columns",
                    "description": "the timeseries columns in Riak",
                    "type": "Object[]"
                }
            ],
            "chainable": 1,
            "class": "Store.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/store.js",
            "line": 190,
            "description": "Set the rows.",
            "itemtype": "method",
            "name": "withRows",
            "params": [
                {
                    "name": "rows",
                    "description": "the timeseries row data",
                    "type": "Object[]"
                }
            ],
            "chainable": 1,
            "class": "Store.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/store.js",
            "line": 200,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The allback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Store.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/ts/store.js",
            "line": 212,
            "description": "Construct a Store instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "a Store instance",
                "type": "Store"
            },
            "class": "Store.Builder",
            "module": "TS"
        },
        {
            "file": "lib/commands/yokozuna/deleteindex.js",
            "line": 81,
            "description": "The name of the index to delete.\nIf one is not supplied, all indexes are returned.",
            "itemtype": "method",
            "name": "withIndexName",
            "params": [
                {
                    "name": "indexName",
                    "description": "the name of the index",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "DeleteIndex.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/deleteindex.js",
            "line": 92,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to execute",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "will always be true.",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "DeleteIndex.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/deleteindex.js",
            "line": 104,
            "description": "Construct a DeleteIndex instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "DeleteIndex"
            },
            "class": "DeleteIndex.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/fetchindex.js",
            "line": 97,
            "description": "The name of the index to fetch.\nIf one is not supplied, all indexes are returned.",
            "itemtype": "method",
            "name": "withIndexName",
            "params": [
                {
                    "name": "indexName",
                    "description": "the name of the index",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchIndex.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/fetchindex.js",
            "line": 108,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "error message",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "array of indexes.",
                            "type": "Object[]",
                            "props": [
                                {
                                    "name": "indexName",
                                    "description": "The name of the index.",
                                    "type": "String"
                                },
                                {
                                    "name": "schemaName",
                                    "description": "The schema for the index.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "FetchIndex.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/fetchindex.js",
            "line": 122,
            "description": "Construct a FetchIndex instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "FetchIndex"
            },
            "class": "FetchIndex.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/fetchschema.js",
            "line": 87,
            "description": "The name of the schema to fetch.",
            "itemtype": "method",
            "name": "withSchemaName",
            "params": [
                {
                    "name": "schemaName",
                    "description": "the name of the schema",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "FetchSchema.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/fetchschema.js",
            "line": 97,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "The response from Riak.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "The schema name.",
                                    "type": "String"
                                },
                                {
                                    "name": "content",
                                    "description": "The schema XML.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "FetchSchema.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/fetchschema.js",
            "line": 111,
            "description": "Construct a FetchSchema instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "FetchSchema"
            },
            "class": "FetchSchema.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/search.js",
            "line": 163,
            "description": "Set the index name used for this search.",
            "itemtype": "method",
            "name": "withIndexName",
            "params": [
                {
                    "name": "indexName",
                    "description": "the name of the yokozuna index",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Search.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/search.js",
            "line": 173,
            "description": "Set the Solr query string.\nAll distributed Solr queries are supported, which actually\nincludes most of the single-node Solr queries.",
            "itemtype": "method",
            "name": "withQuery",
            "params": [
                {
                    "name": "queryString",
                    "description": "the query",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Search.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/search.js",
            "line": 185,
            "description": "Specify the maximum number of results to return.\nRiak defaults to 10 if this is not set.",
            "itemtype": "method",
            "name": "withNumRows",
            "params": [
                {
                    "name": "maxRows",
                    "description": "the maximum number of results to return.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Search.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/search.js",
            "line": 196,
            "description": "Specify the starting result of the query.\nUseful for pagination. The default is 0.",
            "itemtype": "method",
            "name": "withStart",
            "params": [
                {
                    "name": "start",
                    "description": "the index of the starting result.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "Search.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/search.js",
            "line": 207,
            "description": "Sort the results on the specified field name.\nDefault is “none”, which causes the results to be sorted in descending order by score.",
            "itemtype": "method",
            "name": "withSortField",
            "params": [
                {
                    "name": "sortField",
                    "description": "the fieldname to sort the results on.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Search.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/search.js",
            "line": 218,
            "description": "Filters the search by an additional query scoped to inline fields.",
            "itemtype": "method",
            "name": "withFilterQuery",
            "params": [
                {
                    "name": "filterQuery",
                    "description": "the filter query.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Search.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/search.js",
            "line": 228,
            "description": "Use the provided field as the default.\nOverrides the “default_field” setting in the schema file.",
            "itemtype": "method",
            "name": "withDefaultField",
            "params": [
                {
                    "name": "fieldName",
                    "description": "the name of the field.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Search.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/search.js",
            "line": 239,
            "description": "Set the default operation.\nAllowed settings are either “and” or “or”.\nOverrides the “default_op” setting in the schema file.",
            "itemtype": "method",
            "name": "withDefaultOperation",
            "params": [
                {
                    "name": "op",
                    "description": "A string containing either \"and\" or \"or\".",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Search.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/search.js",
            "line": 251,
            "description": "Only return the provided fields.\nFilters the results to only contain the provided fields.",
            "itemtype": "method",
            "name": "withReturnFields",
            "params": [
                {
                    "name": "fields",
                    "description": "an array of field names.",
                    "type": "String[]"
                }
            ],
            "chainable": 1,
            "class": "Search.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/search.js",
            "line": 262,
            "description": "Sorts all of the results by bucket key, or the search score, before the given rows are chosen.\nThis is useful when paginating to ensure the results are returned in a consistent order.",
            "itemtype": "method",
            "name": "withPresort",
            "params": [
                {
                    "name": "presort",
                    "description": "a string containing either \"key\" or \"score\".",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Search.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/search.js",
            "line": 273,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute when the comman completes.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "an error message. Will be null if no error.",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "the response from Riak (Solr)",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "numFound",
                                    "description": "The number of documents found.",
                                    "type": "Number"
                                },
                                {
                                    "name": "maxScore",
                                    "description": "The max score value.",
                                    "type": "Number"
                                },
                                {
                                    "name": "docs",
                                    "description": "Array of documents returned from Solr.",
                                    "type": "Object[]"
                                }
                            ]
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "Search.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/search.js",
            "line": 288,
            "description": "Construct a new Search instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "Search"
            },
            "class": "Search.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/storeindex.js",
            "line": 101,
            "description": "The name of the index to store.",
            "itemtype": "method",
            "name": "withIndexName",
            "params": [
                {
                    "name": "indexName",
                    "description": "the name of the index",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "StoreIndex.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/storeindex.js",
            "line": 111,
            "description": "The name of the schema to use with this index.\nIf not provided the default '_yz_default' will be used.",
            "itemtype": "method",
            "name": "withSchemaName",
            "params": [
                {
                    "name": "schemaName",
                    "description": "the name of the schema to use.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "StoreIndex.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/storeindex.js",
            "line": 122,
            "description": "Set a timeout for this operation.",
            "itemtype": "method",
            "name": "withTimeout",
            "params": [
                {
                    "name": "timeout",
                    "description": "a timeout in milliseconds.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StoreIndex.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/storeindex.js",
            "line": 132,
            "description": "Set the nVal.",
            "itemtype": "method",
            "name": "withNVal",
            "params": [
                {
                    "name": "nVal",
                    "description": "the number of replicas.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "StoreIndex.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/storeindex.js",
            "line": 142,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to execute",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "operation either succeeds or errors. This will be true.",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "StoreIndex.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/storeindex.js",
            "line": 154,
            "description": "Construct a StoreIndex instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "StoreIndex"
            },
            "class": "StoreIndex.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/storeschema.js",
            "line": 87,
            "description": "The name of the schema.",
            "itemtype": "method",
            "name": "withSchemaName",
            "params": [
                {
                    "name": "schemaName",
                    "description": "the name of the schema.",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "StoreSchema.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/storeschema.js",
            "line": 97,
            "description": "The XML that defines this schema",
            "itemtype": "method",
            "name": "withSchema",
            "params": [
                {
                    "name": "schemaXML",
                    "description": "The XML that defines the schema",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "StoreSchema.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/storeschema.js",
            "line": 107,
            "description": "Set the callback to be executed when the operation completes.",
            "itemtype": "method",
            "name": "withCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to execute",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "An error message",
                            "type": "String"
                        },
                        {
                            "name": "response",
                            "description": "operation either succeeds or errors. This will be true.",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "chainable": 1,
            "class": "StoreSchema.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/yokozuna/storeschema.js",
            "line": 119,
            "description": "Construct a StoreSchema instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "StoreSchema"
            },
            "class": "StoreSchema.Builder",
            "module": "YZ"
        },
        {
            "file": "lib/commands/commandbase.js",
            "line": 65,
            "description": "Fires the user's callback with the arguments passed in.",
            "itemtype": "method",
            "name": "getCallback",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "the user supplied callback",
                "type": "Function"
            },
            "class": "CommandBase",
            "module": "Core"
        },
        {
            "file": "lib/commands/commandbase.js",
            "line": 75,
            "description": "Returns the expected response code for this command.",
            "itemtype": "method",
            "name": "getExpectedResponseCode",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "the expected response code for this command.",
                "type": "Number"
            },
            "class": "CommandBase",
            "module": "Core"
        },
        {
            "file": "lib/commands/commandbase.js",
            "line": 85,
            "description": "Returns the encoded protobuf and message header.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getRiakMessage",
            "return": {
                "description": "object containing the header and encoded protobuf",
                "type": "Object"
            },
            "class": "CommandBase",
            "module": "Core"
        },
        {
            "file": "lib/commands/commandbase.js",
            "line": 108,
            "description": "Returns and instance of the protocol buffer message builder for this command.\nThis is determined via the pbRequestName passed to the constructor.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getPbReqBuilder",
            "return": {
                "description": "the builder for the protocol buffer message to be sent for this command",
                "type": "Object"
            },
            "class": "CommandBase",
            "module": "Core"
        },
        {
            "file": "lib/commands/commandbase.js",
            "line": 125,
            "description": "Construct and return the Riak protocol buffer message for this command.\nSubclasses must override this method.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "constructPbRequest",
            "return": {
                "description": "a protocol buffer message builder",
                "type": "Object"
            },
            "class": "CommandBase",
            "module": "Core"
        },
        {
            "file": "lib/commands/commandbase.js",
            "line": 136,
            "description": "Called by RiakNode when a response is received.\nSubclasses must override this method.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onSuccess",
            "params": [
                {
                    "name": "pbResponseMessage",
                    "description": "the protocol buffer received from riak",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if not streaming or the last response has been received, false otherwise.",
                "type": "Boolean"
            },
            "class": "CommandBase",
            "module": "Core"
        },
        {
            "file": "lib/commands/commandbase.js",
            "line": 148,
            "description": "Called by RiakNode when a RpbErrorResp is received and all retries are exhausted.\nCommands may override this method.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onRiakError",
            "params": [
                {
                    "name": "rpbErrorResp",
                    "description": "the RpbErrorResp protocol buffer",
                    "type": "Object"
                }
            ],
            "class": "CommandBase",
            "module": "Core"
        },
        {
            "file": "lib/commands/commandbase.js",
            "line": 161,
            "description": "Called by RiakNode if an error occurs executing the command and all retries are exhausted.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "onError",
            "params": [
                {
                    "name": "msg",
                    "description": "an error message",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "additional error data",
                    "type": "Object"
                }
            ],
            "class": "CommandBase",
            "module": "Core"
        },
        {
            "file": "lib/core/leastexecutingnodemanager.js",
            "line": 64,
            "description": "Randomize array element order in-place.\nUsing Durstenfeld shuffle algorithm.\nhttp://stackoverflow.com/a/12646864",
            "class": "LeastExecutingNodeManager",
            "module": "Core"
        },
        {
            "file": "lib/core/nodemanager.js",
            "line": 30,
            "description": "Receives the array or RiakNode objects from the RiakCluster, chooses one, and executes the command on it.",
            "params": [
                {
                    "name": "nodes",
                    "description": "The array of nodes contained in the RiakCluster",
                    "type": "RiakNode[]"
                },
                {
                    "name": "command",
                    "description": "The command to execute on a node.",
                    "type": "Object"
                },
                {
                    "name": "previous",
                    "description": "if a command is being retried due to a failure, this will be the previous node on which it was attempted.",
                    "type": "RiakNode",
                    "optional": true
                }
            ],
            "return": {
                "description": "True if a node was chosen and accepted the command, false otherwise.",
                "type": "Boolean"
            },
            "class": "NodeManager",
            "module": "Core"
        },
        {
            "file": "lib/core/nodemanager.js",
            "line": 41,
            "params": [
                {
                    "name": "node",
                    "description": "The node on which to try to execute the command",
                    "type": "RiakNode"
                },
                {
                    "name": "command",
                    "description": "The command to execute on a node.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "True if a node was chosen and accepted the command, false otherwise.",
                "type": "Boolean"
            },
            "class": "NodeManager",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 81,
            "description": "Start this RiakCluster",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "- a callback for when cluster is started.",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "err",
                            "description": "- will be set to an error if one occurred.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "cluster",
                            "description": "- will be set to the cluster object.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "RiakCluster",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 119,
            "description": "Stop this RiakCluster",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "callback",
                    "description": "- called when cluster completely stopped.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "- set to an error if one occurrs during start.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "state",
                            "description": "- the state of the cluster at shutdown.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "RiakCluster",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 204,
            "description": "Execute a command on this RiakCluster.\n\nSelects a RiakNode from the cluster and executes the command on it.",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "riakCommand",
                    "description": "- the command to execute.",
                    "type": "Object"
                },
                {
                    "name": "previous",
                    "description": "the previous node this command was attempted on",
                    "type": "RiakNode",
                    "optional": true
                }
            ],
            "class": "RiakCluster",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 273,
            "description": "Add a RiakNode to this cluster.",
            "itemtype": "method",
            "name": "addNode",
            "params": [
                {
                    "name": "node",
                    "description": "the (unstarted) RiakNode to add.",
                    "type": "RiakNode"
                }
            ],
            "class": "RiakCluster",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 285,
            "description": "Get a RiakNode index from this cluster.",
            "itemtype": "method",
            "name": "getNodeIndex",
            "params": [
                {
                    "name": "node",
                    "description": "- the node for getting the index. May be supplied as a RiakNode instance or IP|hostname[:port]",
                    "type": "RiakNode|String"
                }
            ],
            "return": {
                "description": "- The node index in this cluster. Returns -1 if the node does not exist.",
                "type": "RiakNode"
            },
            "class": "RiakCluster",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 311,
            "description": "Remove a RiakNode from this cluster.\nThe node being removed will also be stopped.",
            "itemtype": "method",
            "name": "removeNode",
            "params": [
                {
                    "name": "node",
                    "description": "- the node to remove. May be supplied as a RiakNode instance or IP|hostname[:port]",
                    "type": "RiakNode|String"
                }
            ],
            "return": {
                "description": "- true if the node was removed.",
                "type": "Boolean"
            },
            "class": "RiakCluster",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 343,
            "description": "The state of this cluster.\n\nIf listening for stateChange events, a numeric value will be sent that\ncan be compared to:\n\n    RiakCluster.State.CREATED\n    RiakCluster.State.RUNNING\n    RiakCluster.State.SHUTTING_DOWN\n    RiakCluster.State.SHUTDOWN\n\nSee: {{#crossLink \"RiakCluster/stateChange:event\"}}stateChange{{/crossLink}}",
            "itemtype": "property",
            "name": "State",
            "type": "{Object}",
            "static": 1,
            "final": 1,
            "class": "RiakCluster",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 384,
            "description": "This event is fired when the state of the RiakCluster changes.\nSee: {{#crossLink \"RiakCluster/State:property\"}}RiakCluster.State{{/crossLink}}",
            "itemtype": "event",
            "name": "stateChange",
            "params": [
                {
                    "name": "state",
                    "description": "- the new {{#crossLink \"RiakCluster/State:property\"}}RiakCluster.State{{/crossLink}}",
                    "type": "Number"
                }
            ],
            "class": "RiakCluster",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 392,
            "description": "This event is fired when the state of any RiakNode in the cluster changes.",
            "itemtype": "event",
            "name": "nodeStateChange",
            "params": [
                {
                    "name": "node",
                    "description": "- the {{#crossLink \"RiakNode\"}}{{/crossLink}} object whose state changed",
                    "type": "Object"
                },
                {
                    "name": "state",
                    "description": "- the {{#crossLink \"RiakNode/State:property\"}}RiakNode.State{{/crossLink}}",
                    "type": "Number"
                }
            ],
            "class": "RiakCluster",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 400,
            "description": "This event is fired whenever a command fails on a RiakNode and needs to be retried.\nRiakCluster is a listener.",
            "class": "RiakCluster",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 422,
            "description": "The RiakNodes to use.",
            "itemtype": "method",
            "name": "withRiakNodes",
            "params": [
                {
                    "name": "nodes",
                    "description": "array of (unstarted) {{#crossLink \"RiakNode\"}}{{/crossLink}} instances.",
                    "type": "RiakNode[]"
                }
            ],
            "return": {
                "description": "",
                "type": "RiakCluster.Builder"
            },
            "class": "RiakCluster.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 436,
            "description": "Set the number of times a command will be attempted.\nIn the case of a command failing for any reason, it will be retried \non a different node.",
            "itemtype": "method",
            "name": "withExecutionAttempts",
            "params": [
                {
                    "name": "numAttempts",
                    "description": "- the number of times to attempt a command (__default:__ 3)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "RiakCluster.Builder"
            },
            "class": "RiakCluster.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 448,
            "description": "Set the NodeManager for this cluster.\n\nIf not provided the {{#crossLink \"RoundRobinNodeManager\"}}{{/crossLink}} is\nused.",
            "itemtype": "method",
            "name": "withNodeManager",
            "params": [
                {
                    "name": "nodeManager",
                    "description": "the node manager used to select nodes.",
                    "type": "NodeManager"
                }
            ],
            "chainable": 1,
            "class": "RiakCluster.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 461,
            "description": "Set whether to queue commands or not if no RiakNodes are available.\n\nIf all nodes are down (health checking) or maxConnections are in use on\nall nodes, the default behavior is to fail commands when submitted. \n\nSetting this option causes the the RiakCluster to queue additional commands\n(FIFO) then send them when nodes/connections become available. \n\nIf maxDepth is supplied the queue is bounded and additional commands \nattempting to be queued will be failed. The default is an unbounded queue.",
            "itemtype": "method",
            "name": "withQueueCommands",
            "params": [
                {
                    "name": "maxDepth",
                    "description": "the maximum number of commands to queue. Default is unlimited.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "unlimited"
                },
                {
                    "name": "submitInterval",
                    "description": "The duration in milliseconds between queue submission attempts. Default is 500.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "500"
                }
            ],
            "chainable": 1,
            "class": "RiakCluster.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riakcluster.js",
            "line": 484,
            "description": "Builds a RiakCluster instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "RiakCluster"
            },
            "class": "RiakCluster.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 97,
            "description": "Start this RiakNode.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "callback",
                    "description": "- a callback for when node is started.",
                    "type": "Function"
                }
            ],
            "class": "RiakNode",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 176,
            "description": "Stop this RiakNode.",
            "params": [
                {
                    "name": "callback",
                    "description": "- called when node completely stopped.",
                    "type": "Function"
                }
            ],
            "itemtype": "method",
            "name": "stop",
            "class": "RiakNode",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 229,
            "description": "Execute a command on this RiakNode.",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "command",
                    "description": "- a command to execute.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "- if this RiakNode accepted the command for execution.",
                "type": "Boolean"
            },
            "class": "RiakNode",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 421,
            "description": "The state of this node.\n\nIf listeneing for stateChange events, a numeric value will be sent that\ncan be compared to:\n\n    RiakNode.State.CREATED\n    RiakNode.State.RUNNING\n    RiakNode.State.HEALTH_CHECKING\n    RiakNode.State.SHUTTING_DOWN\n    RiakNode.State.SHUTDOWN\n\nSee: {{#crossLink \"RiakNode/stateChange:event\"}}stateChange{{/crossLink}}",
            "itemtype": "property",
            "name": "State",
            "type": "{Object}",
            "static": 1,
            "final": 1,
            "class": "RiakNode",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 479,
            "description": "This event is fired whenever the state of the RiakNode changes.",
            "itemtype": "event",
            "name": "stateChange",
            "params": [
                {
                    "name": "node",
                    "description": "- the RiakNode object whose state changed",
                    "type": "Object"
                },
                {
                    "name": "state",
                    "description": "- the {{#crossLink \"RiakNode/State:property\"}}RiakNode.State{{/crossLink}}",
                    "type": "Number"
                }
            ],
            "class": "RiakNode",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 487,
            "description": "This event is fired whenever a command fails and needs to be retried.",
            "itemtype": "event",
            "name": "retryCommand",
            "params": [
                {
                    "name": "command",
                    "description": "- the command to retry",
                    "type": "Object"
                },
                {
                    "name": "node",
                    "description": "- this RiakNode",
                    "type": "RiakNode"
                }
            ],
            "class": "RiakNode",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 510,
            "description": "Set the remote address for the RiakNode.",
            "itemtype": "method",
            "name": "withRemoteAddress",
            "params": [
                {
                    "name": "address",
                    "description": "- IP or hostanme of the Riak node (__default:__ 127.0.0.1)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "RiakNode.Builder"
            },
            "class": "RiakNode.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 521,
            "description": "Set the remote port for this RiakNode.",
            "itemtype": "method",
            "name": "withRemotePort",
            "params": [
                {
                    "name": "port",
                    "description": "- remote port of the Riak node (__default:__ 8087)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "RiakNode.Builder"
            },
            "class": "RiakNode.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 532,
            "description": "Set the minimum number of active connections to maintain.\nThese connections are exempt from the idle timeout.",
            "itemtype": "method",
            "name": "withMinConnections",
            "params": [
                {
                    "name": "minConnections",
                    "description": "- number of connections to maintain (__default:__ 1)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "RiakNode.Builder"
            },
            "class": "RiakNode.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 544,
            "description": "Set the maximum number of connections allowed.",
            "itemtype": "method",
            "name": "withMaxConnections",
            "params": [
                {
                    "name": "maxConnections",
                    "description": "- maximum number of connections to allow (__default:__ 10000)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "RiakNode.Builder"
            },
            "class": "RiakNode.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 555,
            "description": "Set the idle timeout used to reap inactive connections.\nAny connection that has been idle for this amount of time\nbecomes eligible to be closed and discarded excluding the number\nset via __withMinConnections()__.",
            "itemtype": "method",
            "name": "withIdleTimeout",
            "params": [
                {
                    "name": "idleTimeout",
                    "description": "- the timeout in milliseconds (__defualt:__ 3000)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "RiakNode.Builder"
            },
            "class": "RiakNode.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 569,
            "description": "Set the connection timeout used when making new connections.",
            "itemtype": "method",
            "name": "withConnectionTimeout",
            "params": [
                {
                    "name": "connectionTimeout",
                    "description": "- timeout in milliseconds (__default:__ 0).",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "RiakNode.Builder"
            },
            "class": "RiakNode.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 580,
            "description": "Set whether to use the cork/uncork socket functions.",
            "itemtype": "method",
            "name": "withCork",
            "params": [
                {
                    "name": "cork",
                    "description": "use cork/uncork. Default is true.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "chainable": 1,
            "class": "RiakNode.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 592,
            "description": "Set the authentication information for connections made by this node.",
            "itemtype": "method",
            "name": "withAuth",
            "params": [
                {
                    "name": "auth",
                    "description": "Set the authentication information for connections made by this node.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "user",
                            "description": "Riak username.",
                            "type": "String"
                        },
                        {
                            "name": "password",
                            "description": "Riak password. Not required if using user cert.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "pfx",
                            "description": "A string or buffer holding the PFX or PKCS12 encoded private key, certificate and CA certificates.",
                            "type": "String|Buffer",
                            "optional": true
                        },
                        {
                            "name": "key",
                            "description": "A string holding the PEM encoded private key.",
                            "type": "String|Buffer",
                            "optional": true
                        },
                        {
                            "name": "passphrase",
                            "description": "A string of passphrase for the private key or pfx.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "cert",
                            "description": "A string holding the PEM encoded certificate.",
                            "type": "String|Buffer",
                            "optional": true
                        },
                        {
                            "name": "ca",
                            "description": "Either a string or list of strings of PEM encoded CA certificates to trust.",
                            "type": "String|String[]|Buffer[]",
                            "optional": true
                        },
                        {
                            "name": "crl",
                            "description": "Either a string or list of strings of PEM encoded CRLs (Certificate Revocation List).",
                            "type": "String|String[]|Buffer[]",
                            "optional": true
                        },
                        {
                            "name": "rejectUnauthorized",
                            "description": "A boolean indicating whether a server should automatically reject clients with invalid certificates. Only applies to servers with requestCert enabled.     * @return {RiakNode.Builder}",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "RiakNode.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 610,
            "description": "Set the command to be used for a health check.\n\nIf this RiakNode performs a health check, a new connection is made and\na command performed. The default is to send a {{#crossLink \"Ping\"}}{{/crossLink}}\ncommand but any command can be used. If it completes successfully the\nhealth check is considered a success.",
            "itemtype": "method",
            "name": "withHealthCheck",
            "params": [
                {
                    "name": "healthCheck",
                    "description": "- a command to execute as a health check.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "RiakNode.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 625,
            "description": "Builds a RiakNode instance.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "RiakNode"
            },
            "class": "RiakNode.Builder",
            "module": "Core"
        },
        {
            "file": "lib/core/riaknode.js",
            "line": 636,
            "description": "Static factory for constructing a set of RiakNodes.\n\nTo create a set of RiakNodes with the same options:\n\n     var options = new RiakNode.Builder().withMinConnections(10);\n     var nodes = RiakNode.buildNodes(['192.168.1.1', '192.168.1.2'], options);\n\n__options__ can be manually constructed or an instance of the Builder.",
            "static": 1,
            "itemtype": "method",
            "name": "buildNodes",
            "params": [
                {
                    "name": "addresses",
                    "description": "- an array of IP|hostname[:port]",
                    "type": "String[]"
                },
                {
                    "name": "options",
                    "description": "- the options to use for all RiakNodes.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Array/RiakNode"
            },
            "class": "RiakNode.Builder",
            "module": "Core"
        },
        {
            "file": "lib/client.js",
            "line": 96,
            "description": "Shut down the client gracefully.\n\nThis will cause all connections to be closed and any remaining in-flight\ncommands to finish. \n\nThe provided callback will be added as a stateChange listener to the client's\nRiakCluster.\n\nSee: {{#crossLink \"RiakCluster/stateChange:event\"}}RiakCluster.stateChange{{/crossLink}}",
            "itemtype": "method",
            "name": "shutdown",
            "params": [
                {
                    "name": "callback",
                    "description": "- will be registered as a stateChange listener on the RiakCluster.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 116,
            "description": "Stop the client gracefully.\n\nThis will cause all connections to be closed and any remaining in-flight\ncommands to finish. \n\nThe provided callback will be called when the client is completely stopped.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "callback",
                    "description": "- will be called when client is stopped.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "- set to an error if one occurrs during stop.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "state",
                            "description": "- the state of the cluster at shutdown.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 134,
            "description": "Get the client's RiakCluster.",
            "itemtype": "method",
            "name": "getRiakCluster",
            "return": {
                "description": "",
                "type": "Core.RiakCluster"
            },
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 148,
            "description": "See {{#crossLink \"RiakCluster/execute:method\"}}RiakCluster#execute{{/crossLink}}",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "command",
                    "description": "Any Riak command object from the various modules.",
                    "type": "Object"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 157,
            "description": "See {{#crossLink \"Ping\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "ping",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 167,
            "description": "See {{#crossLink \"DeleteValue\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "deleteValue",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 178,
            "description": "See {{#crossLink \"FetchBucketProps\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "fetchBucketProps",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 189,
            "description": "See {{#crossLink \"FetchBucketTypeProps\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "fetchBucketTypeProps",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 200,
            "description": "See {{#crossLink \"FetchValue\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "fetchValue",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 211,
            "description": "See {{#crossLink \"FetchPreflist\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "fetchPreflist",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 222,
            "description": "See {{#crossLink \"ListBuckets\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "ListBuckets",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 233,
            "description": "See {{#crossLink \"ListKeys\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "listKeys",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 244,
            "description": "See {{#crossLink \"SecondaryIndexQuery\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "secondaryIndexQuery",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 255,
            "description": "See {{#crossLink \"StoreBucketProps\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "storeBucketProps",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 266,
            "description": "See {{#crossLink \"StoreBucketTypeProps\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "storeBucketTypeProps",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 277,
            "description": "See {{#crossLink \"StoreValue\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "storeValue",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 292,
            "description": "See {{#crossLink \"FetchCounter\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "fetchCounter",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 303,
            "description": "See {{#crossLink \"UpdateCounter\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "updateCounter",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 314,
            "description": "See {{#crossLink \"FetchSet\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "fetchSet",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 325,
            "description": "See {{#crossLink \"UpdateSet\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "updateSet",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 336,
            "description": "See {{#crossLink \"FetchMap\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "fetchMap",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 347,
            "description": "See {{#crossLink \"UpdateMap\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "updateMap",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 362,
            "description": "See {{#crossLink \"DeleteIndex\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "deleteIndex",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 373,
            "description": "See {{#crossLink \"FetchIndex\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "fetchIndex",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 384,
            "description": "See {{#crossLink \"FetchSchema\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "fetchSchema",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 395,
            "description": "See {{#crossLink \"Search\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 406,
            "description": "See {{#crossLink \"StoreIndex\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "storeIndex",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 417,
            "description": "See {{#crossLink \"StoreSchema\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "storeSchema",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 432,
            "description": "See {{#crossLink \"MapReduce\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "mapReduce",
            "params": [
                {
                    "name": "query",
                    "description": "The map-reduce query.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                },
                {
                    "name": "stream",
                    "description": "Stream the results or accumulate before calling callback.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 449,
            "description": "See {{#crossLink \"Store\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "tsStore",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 461,
            "description": "See {{#crossLink \"Describe\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "tsDescribe",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 473,
            "description": "See {{#crossLink \"Query\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "tsQuery",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 485,
            "description": "See {{#crossLink \"Get\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "tsGet",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 497,
            "description": "See {{#crossLink \"Delete\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "tsDelete",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        },
        {
            "file": "lib/client.js",
            "line": 509,
            "description": "See {{#crossLink \"ListKeys\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "tsListKeys",
            "params": [
                {
                    "name": "options",
                    "description": "The options for this operation.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when the operation completes.",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "Client"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/commands/kv/riakobject.js:143"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/core/nodemanager.js:30"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/core/nodemanager.js:41"
        },
        {
            "message": "Missing item type\nRandomize array element order in-place.\nUsing Durstenfeld shuffle algorithm.\nhttp://stackoverflow.com/a/12646864",
            "line": " lib/core/leastexecutingnodemanager.js:64"
        },
        {
            "message": "Missing item type\nReceives the array or RiakNode objects from the RiakCluster, chooses one, and executes the command on it.",
            "line": " lib/core/nodemanager.js:30"
        },
        {
            "message": "Missing item type",
            "line": " lib/core/nodemanager.js:41"
        },
        {
            "message": "Missing item type\nThis event is fired whenever a command fails on a RiakNode and needs to be retried.\nRiakCluster is a listener.",
            "line": " lib/core/riakcluster.js:400"
        }
    ]
}